# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_McsfNetBase')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_McsfNetBase')
    _McsfNetBase = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_McsfNetBase', [dirname(__file__)])
        except ImportError:
            import _McsfNetBase
            return _McsfNetBase
        try:
            _mod = imp.load_module('_McsfNetBase', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _McsfNetBase = swig_import_helper()
    del swig_import_helper
else:
    import _McsfNetBase
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _McsfNetBase.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _McsfNetBase.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _McsfNetBase.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _McsfNetBase.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _McsfNetBase.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _McsfNetBase.SwigPyIterator_equal(self, x)

    def copy(self):
        return _McsfNetBase.SwigPyIterator_copy(self)

    def next(self):
        return _McsfNetBase.SwigPyIterator_next(self)

    def __next__(self):
        return _McsfNetBase.SwigPyIterator___next__(self)

    def previous(self):
        return _McsfNetBase.SwigPyIterator_previous(self)

    def advance(self, n):
        return _McsfNetBase.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _McsfNetBase.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _McsfNetBase.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _McsfNetBase.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _McsfNetBase.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _McsfNetBase.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _McsfNetBase.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _McsfNetBase.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _McsfNetBase.SHARED_PTR_DISOWN
class SwigStringUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigStringUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigStringUtil, name)
    __repr__ = _swig_repr
    if _newclass:
        GetSize = staticmethod(_McsfNetBase.SwigStringUtil_GetSize)
    else:
        GetSize = _McsfNetBase.SwigStringUtil_GetSize
    if _newclass:
        StringAsArray = staticmethod(_McsfNetBase.SwigStringUtil_StringAsArray)
    else:
        StringAsArray = _McsfNetBase.SwigStringUtil_StringAsArray
    if _newclass:
        ResizeUninitialized = staticmethod(_McsfNetBase.SwigStringUtil_ResizeUninitialized)
    else:
        ResizeUninitialized = _McsfNetBase.SwigStringUtil_ResizeUninitialized
    if _newclass:
        NewStdString = staticmethod(_McsfNetBase.SwigStringUtil_NewStdString)
    else:
        NewStdString = _McsfNetBase.SwigStringUtil_NewStdString
    if _newclass:
        DestroyStdString = staticmethod(_McsfNetBase.SwigStringUtil_DestroyStdString)
    else:
        DestroyStdString = _McsfNetBase.SwigStringUtil_DestroyStdString
    if _newclass:
        ToCStr = staticmethod(_McsfNetBase.SwigStringUtil_ToCStr)
    else:
        ToCStr = _McsfNetBase.SwigStringUtil_ToCStr
    if _newclass:
        ToStdString = staticmethod(_McsfNetBase.SwigStringUtil_ToStdString)
    else:
        ToStdString = _McsfNetBase.SwigStringUtil_ToStdString

    def __init__(self):
        this = _McsfNetBase.new_SwigStringUtil()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_SwigStringUtil
    __del__ = lambda self: None
SwigStringUtil_swigregister = _McsfNetBase.SwigStringUtil_swigregister
SwigStringUtil_swigregister(SwigStringUtil)

def SwigStringUtil_GetSize(pConent):
    return _McsfNetBase.SwigStringUtil_GetSize(pConent)
SwigStringUtil_GetSize = _McsfNetBase.SwigStringUtil_GetSize

def SwigStringUtil_StringAsArray(pConent):
    return _McsfNetBase.SwigStringUtil_StringAsArray(pConent)
SwigStringUtil_StringAsArray = _McsfNetBase.SwigStringUtil_StringAsArray

def SwigStringUtil_ResizeUninitialized(pConent, newSize):
    return _McsfNetBase.SwigStringUtil_ResizeUninitialized(pConent, newSize)
SwigStringUtil_ResizeUninitialized = _McsfNetBase.SwigStringUtil_ResizeUninitialized

def SwigStringUtil_NewStdString():
    return _McsfNetBase.SwigStringUtil_NewStdString()
SwigStringUtil_NewStdString = _McsfNetBase.SwigStringUtil_NewStdString

def SwigStringUtil_DestroyStdString(str):
    return _McsfNetBase.SwigStringUtil_DestroyStdString(str)
SwigStringUtil_DestroyStdString = _McsfNetBase.SwigStringUtil_DestroyStdString

def SwigStringUtil_ToCStr(str):
    return _McsfNetBase.SwigStringUtil_ToCStr(str)
SwigStringUtil_ToCStr = _McsfNetBase.SwigStringUtil_ToCStr

def SwigStringUtil_ToStdString(str):
    return _McsfNetBase.SwigStringUtil_ToStdString(str)
SwigStringUtil_ToStdString = _McsfNetBase.SwigStringUtil_ToStdString

class CommandContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommandContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommandContext, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sReceiver"] = _McsfNetBase.CommandContext_sReceiver_set
    __swig_getmethods__["sReceiver"] = _McsfNetBase.CommandContext_sReceiver_get
    if _newclass:
        sReceiver = _swig_property(_McsfNetBase.CommandContext_sReceiver_get, _McsfNetBase.CommandContext_sReceiver_set)
    __swig_setmethods__["sSender"] = _McsfNetBase.CommandContext_sSender_set
    __swig_getmethods__["sSender"] = _McsfNetBase.CommandContext_sSender_get
    if _newclass:
        sSender = _swig_property(_McsfNetBase.CommandContext_sSender_get, _McsfNetBase.CommandContext_sSender_set)
    __swig_setmethods__["iCommandId"] = _McsfNetBase.CommandContext_iCommandId_set
    __swig_getmethods__["iCommandId"] = _McsfNetBase.CommandContext_iCommandId_get
    if _newclass:
        iCommandId = _swig_property(_McsfNetBase.CommandContext_iCommandId_get, _McsfNetBase.CommandContext_iCommandId_set)
    __swig_setmethods__["sSerializeObject"] = _McsfNetBase.CommandContext_sSerializeObject_set
    __swig_getmethods__["sSerializeObject"] = _McsfNetBase.CommandContext_sSerializeObject_get
    if _newclass:
        sSerializeObject = _swig_property(_McsfNetBase.CommandContext_sSerializeObject_get, _McsfNetBase.CommandContext_sSerializeObject_set)
    __swig_setmethods__["pCommandCallback"] = _McsfNetBase.CommandContext_pCommandCallback_set
    __swig_getmethods__["pCommandCallback"] = _McsfNetBase.CommandContext_pCommandCallback_get
    if _newclass:
        pCommandCallback = _swig_property(_McsfNetBase.CommandContext_pCommandCallback_get, _McsfNetBase.CommandContext_pCommandCallback_set)
    __swig_setmethods__["iWaitTime"] = _McsfNetBase.CommandContext_iWaitTime_set
    __swig_getmethods__["iWaitTime"] = _McsfNetBase.CommandContext_iWaitTime_get
    if _newclass:
        iWaitTime = _swig_property(_McsfNetBase.CommandContext_iWaitTime_get, _McsfNetBase.CommandContext_iWaitTime_set)

    def __init__(self):
        this = _McsfNetBase.new_CommandContext()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_CommandContext
    __del__ = lambda self: None
CommandContext_swigregister = _McsfNetBase.CommandContext_swigregister
CommandContext_swigregister(CommandContext)

class ICommandContextEx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommandContextEx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICommandContextEx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _McsfNetBase.delete_ICommandContextEx
    __del__ = lambda self: None

    def GetReceiver(self):
        return _McsfNetBase.ICommandContextEx_GetReceiver(self)

    def GetSender(self):
        return _McsfNetBase.ICommandContextEx_GetSender(self)

    def GetCommandId(self):
        return _McsfNetBase.ICommandContextEx_GetCommandId(self)

    def GetSerializeObject(self):
        return _McsfNetBase.ICommandContextEx_GetSerializeObject(self)

    def Reply(self, replyObject):
        return _McsfNetBase.ICommandContextEx_Reply(self, replyObject)

    def Clone(self):
        return _McsfNetBase.ICommandContextEx_Clone(self)

    def Destory(self):
        return _McsfNetBase.ICommandContextEx_Destory(self)
ICommandContextEx_swigregister = _McsfNetBase.ICommandContextEx_swigregister
ICommandContextEx_swigregister(ICommandContextEx)

EVENTTYPE_MIN = _McsfNetBase.EVENTTYPE_MIN
EVENTTYPE_DISCONNECT = _McsfNetBase.EVENTTYPE_DISCONNECT
EVENTTYPE_CONNECT_ADDR = _McsfNetBase.EVENTTYPE_CONNECT_ADDR
EVENTTYPE_RECONNECT = _McsfNetBase.EVENTTYPE_RECONNECT
EVENTTYPE_MAX = _McsfNetBase.EVENTTYPE_MAX
class ICommandCallbackHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommandCallbackHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICommandCallbackHandler, name)
    __repr__ = _swig_repr

    def HandleReply(self, pAsyncResult):
        return _McsfNetBase.ICommandCallbackHandler_HandleReply(self, pAsyncResult)
    __swig_destroy__ = _McsfNetBase.delete_ICommandCallbackHandler
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == ICommandCallbackHandler:
            _self = None
        else:
            _self = self
        this = _McsfNetBase.new_ICommandCallbackHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _McsfNetBase.disown_ICommandCallbackHandler(self)
        return weakref_proxy(self)
ICommandCallbackHandler_swigregister = _McsfNetBase.ICommandCallbackHandler_swigregister
ICommandCallbackHandler_swigregister(ICommandCallbackHandler)

class ICommandCallbackHandlerEx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommandCallbackHandlerEx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICommandCallbackHandlerEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _McsfNetBase.delete_ICommandCallbackHandlerEx
    __del__ = lambda self: None

    def HandleReply(self, pAsyncResult):
        return _McsfNetBase.ICommandCallbackHandlerEx_HandleReply(self, pAsyncResult)

    def __init__(self):
        if self.__class__ == ICommandCallbackHandlerEx:
            _self = None
        else:
            _self = self
        this = _McsfNetBase.new_ICommandCallbackHandlerEx(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _McsfNetBase.disown_ICommandCallbackHandlerEx(self)
        return weakref_proxy(self)
ICommandCallbackHandlerEx_swigregister = _McsfNetBase.ICommandCallbackHandlerEx_swigregister
ICommandCallbackHandlerEx_swigregister(ICommandCallbackHandlerEx)

class ICommandHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommandHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICommandHandler, name)
    __repr__ = _swig_repr

    def HandleCommand(self, pContext, pReplyObject):
        return _McsfNetBase.ICommandHandler_HandleCommand(self, pContext, pReplyObject)
    __swig_destroy__ = _McsfNetBase.delete_ICommandHandler
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == ICommandHandler:
            _self = None
        else:
            _self = self
        this = _McsfNetBase.new_ICommandHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _McsfNetBase.disown_ICommandHandler(self)
        return weakref_proxy(self)
ICommandHandler_swigregister = _McsfNetBase.ICommandHandler_swigregister
ICommandHandler_swigregister(ICommandHandler)

class ICommandHandlerEx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommandHandlerEx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICommandHandlerEx, name)
    __repr__ = _swig_repr

    def HandleCommand(self, pContext):
        return _McsfNetBase.ICommandHandlerEx_HandleCommand(self, pContext)
    __swig_destroy__ = _McsfNetBase.delete_ICommandHandlerEx
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == ICommandHandlerEx:
            _self = None
        else:
            _self = self
        this = _McsfNetBase.new_ICommandHandlerEx(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _McsfNetBase.disown_ICommandHandlerEx(self)
        return weakref_proxy(self)
ICommandHandlerEx_swigregister = _McsfNetBase.ICommandHandlerEx_swigregister
ICommandHandlerEx_swigregister(ICommandHandlerEx)

class IAsyncResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAsyncResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAsyncResult, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ReceiveResponse = _McsfNetBase.IAsyncResult_ReceiveResponse
    TimeOut = _McsfNetBase.IAsyncResult_TimeOut
    TCPClose = _McsfNetBase.IAsyncResult_TCPClose
    NotHandler = _McsfNetBase.IAsyncResult_NotHandler

    def GetMarshalObject(self):
        return _McsfNetBase.IAsyncResult_GetMarshalObject(self)

    def IsCompleted(self):
        return _McsfNetBase.IAsyncResult_IsCompleted(self)

    def GetCallResult(self):
        return _McsfNetBase.IAsyncResult_GetCallResult(self)
    __swig_destroy__ = _McsfNetBase.delete_IAsyncResult
    __del__ = lambda self: None

    def Clone(self):
        return _McsfNetBase.IAsyncResult_Clone(self)

    def Destory(self):
        return _McsfNetBase.IAsyncResult_Destory(self)
IAsyncResult_swigregister = _McsfNetBase.IAsyncResult_swigregister
IAsyncResult_swigregister(IAsyncResult)

class SendDataContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SendDataContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SendDataContext, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sReceiver"] = _McsfNetBase.SendDataContext_sReceiver_set
    __swig_getmethods__["sReceiver"] = _McsfNetBase.SendDataContext_sReceiver_get
    if _newclass:
        sReceiver = _swig_property(_McsfNetBase.SendDataContext_sReceiver_get, _McsfNetBase.SendDataContext_sReceiver_set)
    __swig_setmethods__["sSender"] = _McsfNetBase.SendDataContext_sSender_set
    __swig_getmethods__["sSender"] = _McsfNetBase.SendDataContext_sSender_get
    if _newclass:
        sSender = _swig_property(_McsfNetBase.SendDataContext_sSender_get, _McsfNetBase.SendDataContext_sSender_set)
    __swig_setmethods__["iCommandId"] = _McsfNetBase.SendDataContext_iCommandId_set
    __swig_getmethods__["iCommandId"] = _McsfNetBase.SendDataContext_iCommandId_get
    if _newclass:
        iCommandId = _swig_property(_McsfNetBase.SendDataContext_iCommandId_get, _McsfNetBase.SendDataContext_iCommandId_set)
    __swig_setmethods__["sSerailizedObject"] = _McsfNetBase.SendDataContext_sSerailizedObject_set
    __swig_getmethods__["sSerailizedObject"] = _McsfNetBase.SendDataContext_sSerailizedObject_get
    if _newclass:
        sSerailizedObject = _swig_property(_McsfNetBase.SendDataContext_sSerailizedObject_get, _McsfNetBase.SendDataContext_sSerailizedObject_set)
    __swig_setmethods__["iLen"] = _McsfNetBase.SendDataContext_iLen_set
    __swig_getmethods__["iLen"] = _McsfNetBase.SendDataContext_iLen_get
    if _newclass:
        iLen = _swig_property(_McsfNetBase.SendDataContext_iLen_get, _McsfNetBase.SendDataContext_iLen_set)
    __swig_setmethods__["pRawData"] = _McsfNetBase.SendDataContext_pRawData_set
    __swig_getmethods__["pRawData"] = _McsfNetBase.SendDataContext_pRawData_get
    if _newclass:
        pRawData = _swig_property(_McsfNetBase.SendDataContext_pRawData_get, _McsfNetBase.SendDataContext_pRawData_set)
    __swig_setmethods__["iWaitTime"] = _McsfNetBase.SendDataContext_iWaitTime_set
    __swig_getmethods__["iWaitTime"] = _McsfNetBase.SendDataContext_iWaitTime_get
    if _newclass:
        iWaitTime = _swig_property(_McsfNetBase.SendDataContext_iWaitTime_get, _McsfNetBase.SendDataContext_iWaitTime_set)

    def __init__(self):
        this = _McsfNetBase.new_SendDataContext()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AllocMem(self, iLen):
        return _McsfNetBase.SendDataContext_AllocMem(self, iLen)

    def DestoryMem(self):
        return _McsfNetBase.SendDataContext_DestoryMem(self)
    __swig_destroy__ = _McsfNetBase.delete_SendDataContext
    __del__ = lambda self: None
SendDataContext_swigregister = _McsfNetBase.SendDataContext_swigregister
SendDataContext_swigregister(SendDataContext)

class SendDataContextEx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SendDataContextEx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SendDataContextEx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sReceiver"] = _McsfNetBase.SendDataContextEx_sReceiver_set
    __swig_getmethods__["sReceiver"] = _McsfNetBase.SendDataContextEx_sReceiver_get
    if _newclass:
        sReceiver = _swig_property(_McsfNetBase.SendDataContextEx_sReceiver_get, _McsfNetBase.SendDataContextEx_sReceiver_set)
    __swig_setmethods__["sSender"] = _McsfNetBase.SendDataContextEx_sSender_set
    __swig_getmethods__["sSender"] = _McsfNetBase.SendDataContextEx_sSender_get
    if _newclass:
        sSender = _swig_property(_McsfNetBase.SendDataContextEx_sSender_get, _McsfNetBase.SendDataContextEx_sSender_set)
    __swig_setmethods__["iCommandId"] = _McsfNetBase.SendDataContextEx_iCommandId_set
    __swig_getmethods__["iCommandId"] = _McsfNetBase.SendDataContextEx_iCommandId_get
    if _newclass:
        iCommandId = _swig_property(_McsfNetBase.SendDataContextEx_iCommandId_get, _McsfNetBase.SendDataContextEx_iCommandId_set)
    __swig_setmethods__["sSerailizedObject"] = _McsfNetBase.SendDataContextEx_sSerailizedObject_set
    __swig_getmethods__["sSerailizedObject"] = _McsfNetBase.SendDataContextEx_sSerailizedObject_get
    if _newclass:
        sSerailizedObject = _swig_property(_McsfNetBase.SendDataContextEx_sSerailizedObject_get, _McsfNetBase.SendDataContextEx_sSerailizedObject_set)
    __swig_setmethods__["iLen"] = _McsfNetBase.SendDataContextEx_iLen_set
    __swig_getmethods__["iLen"] = _McsfNetBase.SendDataContextEx_iLen_get
    if _newclass:
        iLen = _swig_property(_McsfNetBase.SendDataContextEx_iLen_get, _McsfNetBase.SendDataContextEx_iLen_set)
    __swig_setmethods__["pRawData"] = _McsfNetBase.SendDataContextEx_pRawData_set
    __swig_getmethods__["pRawData"] = _McsfNetBase.SendDataContextEx_pRawData_get
    if _newclass:
        pRawData = _swig_property(_McsfNetBase.SendDataContextEx_pRawData_get, _McsfNetBase.SendDataContextEx_pRawData_set)
    __swig_setmethods__["pCallback"] = _McsfNetBase.SendDataContextEx_pCallback_set
    __swig_getmethods__["pCallback"] = _McsfNetBase.SendDataContextEx_pCallback_get
    if _newclass:
        pCallback = _swig_property(_McsfNetBase.SendDataContextEx_pCallback_get, _McsfNetBase.SendDataContextEx_pCallback_set)
    __swig_setmethods__["iWaitTime"] = _McsfNetBase.SendDataContextEx_iWaitTime_set
    __swig_getmethods__["iWaitTime"] = _McsfNetBase.SendDataContextEx_iWaitTime_get
    if _newclass:
        iWaitTime = _swig_property(_McsfNetBase.SendDataContextEx_iWaitTime_get, _McsfNetBase.SendDataContextEx_iWaitTime_set)
    __swig_setmethods__["sResponseObject"] = _McsfNetBase.SendDataContextEx_sResponseObject_set
    __swig_getmethods__["sResponseObject"] = _McsfNetBase.SendDataContextEx_sResponseObject_get
    if _newclass:
        sResponseObject = _swig_property(_McsfNetBase.SendDataContextEx_sResponseObject_get, _McsfNetBase.SendDataContextEx_sResponseObject_set)

    def __init__(self):
        this = _McsfNetBase.new_SendDataContextEx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_SendDataContextEx
    __del__ = lambda self: None
SendDataContextEx_swigregister = _McsfNetBase.SendDataContextEx_swigregister
SendDataContextEx_swigregister(SendDataContextEx)

class IDataHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDataHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDataHandler, name)
    __repr__ = _swig_repr

    def HandleDataTrans(self, pRawData, iLen):
        return _McsfNetBase.IDataHandler_HandleDataTrans(self, pRawData, iLen)
    __swig_destroy__ = _McsfNetBase.delete_IDataHandler
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == IDataHandler:
            _self = None
        else:
            _self = self
        this = _McsfNetBase.new_IDataHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _McsfNetBase.disown_IDataHandler(self)
        return weakref_proxy(self)
IDataHandler_swigregister = _McsfNetBase.IDataHandler_swigregister
IDataHandler_swigregister(IDataHandler)

class IDataHandlerEx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDataHandlerEx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDataHandlerEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _McsfNetBase.delete_IDataHandlerEx
    __del__ = lambda self: None

    def HandleDataTrans(self, pDataContext):
        return _McsfNetBase.IDataHandlerEx_HandleDataTrans(self, pDataContext)

    def __init__(self):
        if self.__class__ == IDataHandlerEx:
            _self = None
        else:
            _self = self
        this = _McsfNetBase.new_IDataHandlerEx(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _McsfNetBase.disown_IDataHandlerEx(self)
        return weakref_proxy(self)
IDataHandlerEx_swigregister = _McsfNetBase.IDataHandlerEx_swigregister
IDataHandlerEx_swigregister(IDataHandlerEx)

class ICLRCommandHandler(ICommandHandler):
    __swig_setmethods__ = {}
    for _s in [ICommandHandler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICLRCommandHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [ICommandHandler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICLRCommandHandler, name)
    __repr__ = _swig_repr

    def HandleCommandCLR(self, pContext, pSyncResult):
        return _McsfNetBase.ICLRCommandHandler_HandleCommandCLR(self, pContext, pSyncResult)

    def HandleCommand(self, pContext, pReplyObject):
        return _McsfNetBase.ICLRCommandHandler_HandleCommand(self, pContext, pReplyObject)

    def __init__(self):
        if self.__class__ == ICLRCommandHandler:
            _self = None
        else:
            _self = self
        this = _McsfNetBase.new_ICLRCommandHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_ICLRCommandHandler
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _McsfNetBase.disown_ICLRCommandHandler(self)
        return weakref_proxy(self)
ICLRCommandHandler_swigregister = _McsfNetBase.ICLRCommandHandler_swigregister
ICLRCommandHandler_swigregister(ICLRCommandHandler)

class ICLRCommandHandlerEx(ICommandHandlerEx):
    __swig_setmethods__ = {}
    for _s in [ICommandHandlerEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICLRCommandHandlerEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ICommandHandlerEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICLRCommandHandlerEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _McsfNetBase.delete_ICLRCommandHandlerEx
    __del__ = lambda self: None

    def HandleCommandCLR(self, pContext):
        return _McsfNetBase.ICLRCommandHandlerEx_HandleCommandCLR(self, pContext)

    def HandleCommand(self, pContext):
        return _McsfNetBase.ICLRCommandHandlerEx_HandleCommand(self, pContext)

    def __init__(self):
        if self.__class__ == ICLRCommandHandlerEx:
            _self = None
        else:
            _self = self
        this = _McsfNetBase.new_ICLRCommandHandlerEx(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _McsfNetBase.disown_ICLRCommandHandlerEx(self)
        return weakref_proxy(self)
ICLRCommandHandlerEx_swigregister = _McsfNetBase.ICLRCommandHandlerEx_swigregister
ICLRCommandHandlerEx_swigregister(ICLRCommandHandlerEx)

class ICLRCommandCallbackHandlerEx(ICommandCallbackHandlerEx):
    __swig_setmethods__ = {}
    for _s in [ICommandCallbackHandlerEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICLRCommandCallbackHandlerEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ICommandCallbackHandlerEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICLRCommandCallbackHandlerEx, name)
    __repr__ = _swig_repr

    def HandleReply(self, pAsyncResult):
        return _McsfNetBase.ICLRCommandCallbackHandlerEx_HandleReply(self, pAsyncResult)

    def HandleReplyCLR(self, pAsyncResult):
        return _McsfNetBase.ICLRCommandCallbackHandlerEx_HandleReplyCLR(self, pAsyncResult)

    def __init__(self):
        if self.__class__ == ICLRCommandCallbackHandlerEx:
            _self = None
        else:
            _self = self
        this = _McsfNetBase.new_ICLRCommandCallbackHandlerEx(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_ICLRCommandCallbackHandlerEx
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _McsfNetBase.disown_ICLRCommandCallbackHandlerEx(self)
        return weakref_proxy(self)
ICLRCommandCallbackHandlerEx_swigregister = _McsfNetBase.ICLRCommandCallbackHandlerEx_swigregister
ICLRCommandCallbackHandlerEx_swigregister(ICLRCommandCallbackHandlerEx)

class ICLRDataHandlerEx(IDataHandlerEx):
    __swig_setmethods__ = {}
    for _s in [IDataHandlerEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICLRDataHandlerEx, name, value)
    __swig_getmethods__ = {}
    for _s in [IDataHandlerEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICLRDataHandlerEx, name)
    __repr__ = _swig_repr

    def HandleDataTrans(self, pDataContext):
        return _McsfNetBase.ICLRDataHandlerEx_HandleDataTrans(self, pDataContext)

    def HandleDataTransCLR(self, pDataContext):
        return _McsfNetBase.ICLRDataHandlerEx_HandleDataTransCLR(self, pDataContext)

    def __init__(self):
        if self.__class__ == ICLRDataHandlerEx:
            _self = None
        else:
            _self = self
        this = _McsfNetBase.new_ICLRDataHandlerEx(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_ICLRDataHandlerEx
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _McsfNetBase.disown_ICLRDataHandlerEx(self)
        return weakref_proxy(self)
ICLRDataHandlerEx_swigregister = _McsfNetBase.ICLRDataHandlerEx_swigregister
ICLRDataHandlerEx_swigregister(ICLRDataHandlerEx)

class SwigSharedCharArrayUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigSharedCharArrayUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigSharedCharArrayUtil, name)
    __repr__ = _swig_repr
    if _newclass:
        Get = staticmethod(_McsfNetBase.SwigSharedCharArrayUtil_Get)
    else:
        Get = _McsfNetBase.SwigSharedCharArrayUtil_Get
    if _newclass:
        Reset = staticmethod(_McsfNetBase.SwigSharedCharArrayUtil_Reset)
    else:
        Reset = _McsfNetBase.SwigSharedCharArrayUtil_Reset
    if _newclass:
        Destroy = staticmethod(_McsfNetBase.SwigSharedCharArrayUtil_Destroy)
    else:
        Destroy = _McsfNetBase.SwigSharedCharArrayUtil_Destroy
    if _newclass:
        UseCount = staticmethod(_McsfNetBase.SwigSharedCharArrayUtil_UseCount)
    else:
        UseCount = _McsfNetBase.SwigSharedCharArrayUtil_UseCount
    if _newclass:
        New = staticmethod(_McsfNetBase.SwigSharedCharArrayUtil_New)
    else:
        New = _McsfNetBase.SwigSharedCharArrayUtil_New
    if _newclass:
        ToSharedPtr = staticmethod(_McsfNetBase.SwigSharedCharArrayUtil_ToSharedPtr)
    else:
        ToSharedPtr = _McsfNetBase.SwigSharedCharArrayUtil_ToSharedPtr
    if _newclass:
        Destory = staticmethod(_McsfNetBase.SwigSharedCharArrayUtil_Destory)
    else:
        Destory = _McsfNetBase.SwigSharedCharArrayUtil_Destory

    def __init__(self):
        this = _McsfNetBase.new_SwigSharedCharArrayUtil()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_SwigSharedCharArrayUtil
    __del__ = lambda self: None
SwigSharedCharArrayUtil_swigregister = _McsfNetBase.SwigSharedCharArrayUtil_swigregister
SwigSharedCharArrayUtil_swigregister(SwigSharedCharArrayUtil)

def SwigSharedCharArrayUtil_Get(pArray):
    return _McsfNetBase.SwigSharedCharArrayUtil_Get(pArray)
SwigSharedCharArrayUtil_Get = _McsfNetBase.SwigSharedCharArrayUtil_Get

def SwigSharedCharArrayUtil_Reset(pArray, iLen):
    return _McsfNetBase.SwigSharedCharArrayUtil_Reset(pArray, iLen)
SwigSharedCharArrayUtil_Reset = _McsfNetBase.SwigSharedCharArrayUtil_Reset

def SwigSharedCharArrayUtil_Destroy(pArray):
    return _McsfNetBase.SwigSharedCharArrayUtil_Destroy(pArray)
SwigSharedCharArrayUtil_Destroy = _McsfNetBase.SwigSharedCharArrayUtil_Destroy

def SwigSharedCharArrayUtil_UseCount(pArray):
    return _McsfNetBase.SwigSharedCharArrayUtil_UseCount(pArray)
SwigSharedCharArrayUtil_UseCount = _McsfNetBase.SwigSharedCharArrayUtil_UseCount

def SwigSharedCharArrayUtil_New(*args):
    return _McsfNetBase.SwigSharedCharArrayUtil_New(*args)
SwigSharedCharArrayUtil_New = _McsfNetBase.SwigSharedCharArrayUtil_New

def SwigSharedCharArrayUtil_ToSharedPtr(ptr):
    return _McsfNetBase.SwigSharedCharArrayUtil_ToSharedPtr(ptr)
SwigSharedCharArrayUtil_ToSharedPtr = _McsfNetBase.SwigSharedCharArrayUtil_ToSharedPtr

def SwigSharedCharArrayUtil_Destory(*args):
    return _McsfNetBase.SwigSharedCharArrayUtil_Destory(*args)
SwigSharedCharArrayUtil_Destory = _McsfNetBase.SwigSharedCharArrayUtil_Destory

class ICommandHandlerExPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommandHandlerExPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICommandHandlerExPtr, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _McsfNetBase.new_ICommandHandlerExPtr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_ICommandHandlerExPtr
    __del__ = lambda self: None
ICommandHandlerExPtr_swigregister = _McsfNetBase.ICommandHandlerExPtr_swigregister
ICommandHandlerExPtr_swigregister(ICommandHandlerExPtr)

class ICommandContextExPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommandContextExPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICommandContextExPtr, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _McsfNetBase.new_ICommandContextExPtr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_ICommandContextExPtr
    __del__ = lambda self: None
ICommandContextExPtr_swigregister = _McsfNetBase.ICommandContextExPtr_swigregister
ICommandContextExPtr_swigregister(ICommandContextExPtr)

class IDataHandlerExPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDataHandlerExPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDataHandlerExPtr, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _McsfNetBase.new_IDataHandlerExPtr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_IDataHandlerExPtr
    __del__ = lambda self: None
IDataHandlerExPtr_swigregister = _McsfNetBase.IDataHandlerExPtr_swigregister
IDataHandlerExPtr_swigregister(IDataHandlerExPtr)

class ICommandCallbackHandlerExPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommandCallbackHandlerExPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICommandCallbackHandlerExPtr, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _McsfNetBase.new_ICommandCallbackHandlerExPtr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_ICommandCallbackHandlerExPtr
    __del__ = lambda self: None
ICommandCallbackHandlerExPtr_swigregister = _McsfNetBase.ICommandCallbackHandlerExPtr_swigregister
ICommandCallbackHandlerExPtr_swigregister(ICommandCallbackHandlerExPtr)

class IAsyncResultPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAsyncResultPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAsyncResultPtr, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _McsfNetBase.new_IAsyncResultPtr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_IAsyncResultPtr
    __del__ = lambda self: None
IAsyncResultPtr_swigregister = _McsfNetBase.IAsyncResultPtr_swigregister
IAsyncResultPtr_swigregister(IAsyncResultPtr)

class IEventHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEventHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEventHandler, name)
    __repr__ = _swig_repr

    def HandleEvent(self, sSender, iChannelId, iEventId, sEvent):
        return _McsfNetBase.IEventHandler_HandleEvent(self, sSender, iChannelId, iEventId, sEvent)
    __swig_destroy__ = _McsfNetBase.delete_IEventHandler
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == IEventHandler:
            _self = None
        else:
            _self = self
        this = _McsfNetBase.new_IEventHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _McsfNetBase.disown_IEventHandler(self)
        return weakref_proxy(self)
IEventHandler_swigregister = _McsfNetBase.IEventHandler_swigregister
IEventHandler_swigregister(IEventHandler)

class ISyncResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISyncResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISyncResult, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetSerializedObject(self):
        return _McsfNetBase.ISyncResult_GetSerializedObject(self)

    def SetSerializedObject(self, sResult):
        return _McsfNetBase.ISyncResult_SetSerializedObject(self, sResult)

    def GetCallResult(self):
        return _McsfNetBase.ISyncResult_GetCallResult(self)
    __swig_destroy__ = _McsfNetBase.delete_ISyncResult
    __del__ = lambda self: None
ISyncResult_swigregister = _McsfNetBase.ISyncResult_swigregister
ISyncResult_swigregister(ISyncResult)

class ICommunicationProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommunicationProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICommunicationProxy, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _McsfNetBase.delete_ICommunicationProxy
    __del__ = lambda self: None

    def AsyncSendCommand(self, pCommandContext):
        return _McsfNetBase.ICommunicationProxy_AsyncSendCommand(self, pCommandContext)

    def SyncSendData(self, pSendDataContext):
        return _McsfNetBase.ICommunicationProxy_SyncSendData(self, pSendDataContext)

    def SyncSendDataEx(self, pSendContext, sSerializeObject):
        return _McsfNetBase.ICommunicationProxy_SyncSendDataEx(self, pSendContext, sSerializeObject)

    def AsyncSendData(self, pSendDataContext):
        return _McsfNetBase.ICommunicationProxy_AsyncSendData(self, pSendDataContext)

    def AsyncSendDataEx(self, pSendContext):
        return _McsfNetBase.ICommunicationProxy_AsyncSendDataEx(self, pSendContext)

    def RegisterCommandHandler(self, iCommandId, pCommandHandler):
        return _McsfNetBase.ICommunicationProxy_RegisterCommandHandler(self, iCommandId, pCommandHandler)

    def RegisterCommandHandlerEx(self, iCommandId, pCommandHandler):
        return _McsfNetBase.ICommunicationProxy_RegisterCommandHandlerEx(self, iCommandId, pCommandHandler)

    def UnRegisterCommandHandler(self, iCommandId):
        return _McsfNetBase.ICommunicationProxy_UnRegisterCommandHandler(self, iCommandId)

    def UnRegisterAllCommandHandlers(self):
        return _McsfNetBase.ICommunicationProxy_UnRegisterAllCommandHandlers(self)

    def RegisterDataHandler(self, pSendDataHandler):
        return _McsfNetBase.ICommunicationProxy_RegisterDataHandler(self, pSendDataHandler)

    def RegisterDataHandlerEx(self, pSendDataHandler):
        return _McsfNetBase.ICommunicationProxy_RegisterDataHandlerEx(self, pSendDataHandler)

    def UnRegisterDataHandler(self):
        return _McsfNetBase.ICommunicationProxy_UnRegisterDataHandler(self)

    def SendEvent(self, sSender, iEventId, sEvent):
        return _McsfNetBase.ICommunicationProxy_SendEvent(self, sSender, iEventId, sEvent)

    def BroadcastEvent(self, sSender, iEventId, sEvent):
        return _McsfNetBase.ICommunicationProxy_BroadcastEvent(self, sSender, iEventId, sEvent)

    def RegisterEventHandler(self, iChannelId, iEventId, pEventHandler):
        return _McsfNetBase.ICommunicationProxy_RegisterEventHandler(self, iChannelId, iEventId, pEventHandler)

    def UnRegisterEventHandler(self, iChannelId, iEventId):
        return _McsfNetBase.ICommunicationProxy_UnRegisterEventHandler(self, iChannelId, iEventId)

    def UnRegisterAllEventHandlers(self):
        return _McsfNetBase.ICommunicationProxy_UnRegisterAllEventHandlers(self)

    def UnRegisterAllHandlers(self):
        return _McsfNetBase.ICommunicationProxy_UnRegisterAllHandlers(self)

    def SyncSendCommand(self, pCommandContext, sSerializeObject):
        return _McsfNetBase.ICommunicationProxy_SyncSendCommand(self, pCommandContext, sSerializeObject)

    def CheckCastName(self, sName, iWaitTime):
        return _McsfNetBase.ICommunicationProxy_CheckCastName(self, sName, iWaitTime)

    def GetName(self):
        return _McsfNetBase.ICommunicationProxy_GetName(self)

    def GetSystemDispatcherAddress(self):
        return _McsfNetBase.ICommunicationProxy_GetSystemDispatcherAddress(self)

    def SendSystemEvent(self, sSender, iEventId, sEvent):
        return _McsfNetBase.ICommunicationProxy_SendSystemEvent(self, sSender, iEventId, sEvent)

    def BroadcastSystemEvent(self, sSender, iEventId, sEvent):
        return _McsfNetBase.ICommunicationProxy_BroadcastSystemEvent(self, sSender, iEventId, sEvent)
ICommunicationProxy_swigregister = _McsfNetBase.ICommunicationProxy_swigregister
ICommunicationProxy_swigregister(ICommunicationProxy)

class CommunicationProxy(ICommunicationProxy):
    __swig_setmethods__ = {}
    for _s in [ICommunicationProxy]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommunicationProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ICommunicationProxy]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CommunicationProxy, name)
    __repr__ = _swig_repr

    def __init__(self, iReactorPriority=0):
        this = _McsfNetBase.new_CommunicationProxy(iReactorPriority)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _McsfNetBase.delete_CommunicationProxy
    __del__ = lambda self: None

    def AsyncSendCommand(self, pCommandContext):
        return _McsfNetBase.CommunicationProxy_AsyncSendCommand(self, pCommandContext)

    def SyncSendCommand(self, *args):
        return _McsfNetBase.CommunicationProxy_SyncSendCommand(self, *args)

    def SyncSendData(self, pSendDataContext):
        return _McsfNetBase.CommunicationProxy_SyncSendData(self, pSendDataContext)

    def SyncSendDataEx(self, *args):
        return _McsfNetBase.CommunicationProxy_SyncSendDataEx(self, *args)

    def AsyncSendData(self, pSendDataContext):
        return _McsfNetBase.CommunicationProxy_AsyncSendData(self, pSendDataContext)

    def AsyncSendDataEx(self, pSendContext):
        return _McsfNetBase.CommunicationProxy_AsyncSendDataEx(self, pSendContext)

    def RegisterCommandHandler(self, iCommandId, pCommandHandler):
        return _McsfNetBase.CommunicationProxy_RegisterCommandHandler(self, iCommandId, pCommandHandler)

    def RegisterCommandHandlerEx(self, iCommandId, pCommandHandler):
        return _McsfNetBase.CommunicationProxy_RegisterCommandHandlerEx(self, iCommandId, pCommandHandler)

    def UnRegisterCommandHandler(self, iCommandId):
        return _McsfNetBase.CommunicationProxy_UnRegisterCommandHandler(self, iCommandId)

    def UnRegisterAllCommandHandlers(self):
        return _McsfNetBase.CommunicationProxy_UnRegisterAllCommandHandlers(self)

    def RegisterDataHandler(self, pSendDataHandler):
        return _McsfNetBase.CommunicationProxy_RegisterDataHandler(self, pSendDataHandler)

    def RegisterDataHandlerEx(self, pSendDataHandler):
        return _McsfNetBase.CommunicationProxy_RegisterDataHandlerEx(self, pSendDataHandler)

    def UnRegisterDataHandler(self):
        return _McsfNetBase.CommunicationProxy_UnRegisterDataHandler(self)

    def RegisterEventHandler(self, iChannelId, iEventId, pEventHandler):
        return _McsfNetBase.CommunicationProxy_RegisterEventHandler(self, iChannelId, iEventId, pEventHandler)

    def UnRegisterEventHandler(self, iChannelId, iEventId):
        return _McsfNetBase.CommunicationProxy_UnRegisterEventHandler(self, iChannelId, iEventId)

    def UnRegisterAllEventHandlers(self):
        return _McsfNetBase.CommunicationProxy_UnRegisterAllEventHandlers(self)

    def UnRegisterAllHandlers(self):
        return _McsfNetBase.CommunicationProxy_UnRegisterAllHandlers(self)

    def SendEvent(self, sSender, iEventId, sEvent):
        return _McsfNetBase.CommunicationProxy_SendEvent(self, sSender, iEventId, sEvent)

    def BroadcastEvent(self, sSender, iEventId, sEvent):
        return _McsfNetBase.CommunicationProxy_BroadcastEvent(self, sSender, iEventId, sEvent)

    def SubscribeEvent(self, *args):
        return _McsfNetBase.CommunicationProxy_SubscribeEvent(self, *args)

    def StartListener(self, sIpAddr):
        return _McsfNetBase.CommunicationProxy_StartListener(self, sIpAddr)

    def CheckCastToSystemDispatcher(self, sDispatchIpAddr):
        return _McsfNetBase.CommunicationProxy_CheckCastToSystemDispatcher(self, sDispatchIpAddr)

    def CheckCastName(self, sName, iWaitTime):
        return _McsfNetBase.CommunicationProxy_CheckCastName(self, sName, iWaitTime)

    def SetName(self, sName):
        return _McsfNetBase.CommunicationProxy_SetName(self, sName)

    def GetName(self):
        return _McsfNetBase.CommunicationProxy_GetName(self)

    def SetSenderChannelId(self, iChannelId):
        return _McsfNetBase.CommunicationProxy_SetSenderChannelId(self, iChannelId)

    def GetSenderChannelId(self):
        return _McsfNetBase.CommunicationProxy_GetSenderChannelId(self)

    def DispatchEvent(self, *args):
        return _McsfNetBase.CommunicationProxy_DispatchEvent(self, *args)

    def CheckCastToRemote(self, sName, sIpAddr):
        return _McsfNetBase.CommunicationProxy_CheckCastToRemote(self, sName, sIpAddr)

    def SetListenAddress(self, sIPAdress):
        return _McsfNetBase.CommunicationProxy_SetListenAddress(self, sIPAdress)

    def GetListenAddress(self):
        return _McsfNetBase.CommunicationProxy_GetListenAddress(self)

    def GetMacAddress(self):
        return _McsfNetBase.CommunicationProxy_GetMacAddress(self)

    def GetSystemDispatcherAddress(self):
        return _McsfNetBase.CommunicationProxy_GetSystemDispatcherAddress(self)

    def InitNetBase(self, argc, argv):
        return _McsfNetBase.CommunicationProxy_InitNetBase(self, argc, argv)

    def SendSystemEvent(self, sSender, iEventId, sEvent):
        return _McsfNetBase.CommunicationProxy_SendSystemEvent(self, sSender, iEventId, sEvent)

    def BroadcastSystemEvent(self, sSender, iEventId, sEvent):
        return _McsfNetBase.CommunicationProxy_BroadcastSystemEvent(self, sSender, iEventId, sEvent)
CommunicationProxy_swigregister = _McsfNetBase.CommunicationProxy_swigregister
CommunicationProxy_swigregister(CommunicationProxy)

# This file is compatible with both classic and new-style classes.


