// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mcsf_SysCommandDef.proto

#ifndef PROTOBUF_Mcsf_5fSysCommandDef_2eproto__INCLUDED
#define PROTOBUF_Mcsf_5fSysCommandDef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Mcsf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Mcsf_5fSysCommandDef_2eproto();
void protobuf_AssignDesc_Mcsf_5fSysCommandDef_2eproto();
void protobuf_ShutdownFile_Mcsf_5fSysCommandDef_2eproto();


enum SystemCommandId {
  SYSTEM_COMMAND_ID_UNDEFINED = 0,
  SYSTEM_COMMAND_ID_REGIST_CONTAINEE = 1,
  SYSTEM_COMMAND_ID_FIND_CONTAINEE = 2,
  SYSTEM_COMMAND_ID_REGIST_EVENT_CHANNEL = 3,
  SYSTEM_COMMAND_ID_REGIST_WHO_I_AM = 4,
  SYSTEM_COMMAND_ID_CHECK_CAST = 5,
  SYSTEM_COMMAND_ID_SHAREMEMORY_BIGDATA_TRANSFER = 6,
  SYSTEM_COMMAND_ID_SUBSCRIBE_EVENTS = 7,
  SYSTME_COMMAND_ID_IS_EVENT = 8,
  SYSTEM_COMMAND_ID_NUMBER = 9,
  SYSTEM_COMMAND_ID_ECHO = 10,
  SYTTEM_COMMAND_ID_CHECKCAST_TONAME = 11,
  SYSTEM_COMMAND_ID_SYS_MANAGER_GET_PROCESS = 256,
  SYSTEM_COMMAND_ID_SYS_MANAGER_STOP_PROCESS = 257,
  SYSTEM_COMMAND_ID_SYS_MANAGER_START_PROCESS = 258,
  SYSTEM_COMMAND_ID_SYS_MANAGER_RESTART_PROCESS = 259,
  SYSTEM_COMMAND_ID_SYS_MANAGER_STOP_GROUP = 260,
  SYSTEM_COMMAND_ID_SYS_MANAGER_START_GROUP = 261,
  SYSTEM_COMMAND_ID_SYS_MANAGER_RESTART_GROUP = 262,
  SYSTEM_COMMAND_ID_SYS_MANAGER_STOP_ALL_PROCESSES = 263,
  SYSTEM_COMMAND_ID_SYS_MANAGER_START_ALL_PROCESSES = 264,
  SYSTEM_COMMAND_ID_SYS_MANAGER_RESTART_ALL_PROCESSES = 265,
  SYSTEM_COMMAND_ID_SYS_MANAGER_SHUT_DOWN = 266,
  SYSTEM_COMMAND_ID_SYS_MANAGER_KILL_PROCESS = 267,
  SYSTEM_COMMAND_ID_SYS_MANAGER_KILL_GROUP = 268,
  SYSTEM_COMMAND_ID_SYS_MANAGER_KILL_ALL_PROCESSES = 269,
  SYSTEM_COMMAND_ID_SYS_MANAGER_SHUTDOWN_SYSTEM = 270,
  SYSTEM_COMMAND_ID_SYS_MANAGER_QUERY_STATUS = 271,
  SYSTEM_COMMAND_ID_SYS_MANAGER_QUERY_ISSHUTDOWNABLE = 272,
  SYSTEM_COMMAND_ID_SYS_MANAGER_CONTAINER_REPORT = 273,
  SYSTEM_COMMAND_ID_SYS_MANAGER_REGISTER_SLAVE_NAME = 274,
  SYSTEM_COMMAND_ID_SYS_MANAGER_REGISTER_SLAVE_PROCESSINFO = 275,
  SYSTEM_COMMAND_ID_SYS_MANAGER_CSHARP_ERASE_PROCESS = 276,
  SYSTME_COMMAND_ID_PROCESS_INFO_REPORT = 277,
  SYSTEM_COMMAND_ID_PROCESS_INFO_QUERY = 278,
  SYSTEM_COMMAND_ID_SYS_MANAGER_SLAVE_EXAMINATION = 279,
  SYSTEM_COMMAND_ID_SYS_MANAGER_QUERY_SHUT_DOWN = 280,
  SYSTEM_COMMAND_ID_SYS_MANAGER_QUERY_SLAVE_DISCINFO = 281,
  SYSTEM_COMMAND_ID_SYS_MANAGER_SHUTDOWN_PREPARATION = 282,
  SYSTEM_COMMAND_ID_SYS_MANAGER_OVER_SELF = 283,
  SYSTEM_COMMAND_ID_SYS_MANAGER_ABORT_SHUTDOWN_SYSTEM = 284,
  SYSTEM_COMMAND_ID_SYS_MANAGER_ADJUST_SLAVE_PROCESS_PRIORITY = 285,
  SYSTEM_COMMAND_ID_UNREGIST_CONTAINEE = 768
};
bool SystemCommandId_IsValid(int value);
const SystemCommandId SystemCommandId_MIN = SYSTEM_COMMAND_ID_UNDEFINED;
const SystemCommandId SystemCommandId_MAX = SYSTEM_COMMAND_ID_UNREGIST_CONTAINEE;
const int SystemCommandId_ARRAYSIZE = SystemCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemCommandId_descriptor();
inline const ::std::string& SystemCommandId_Name(SystemCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemCommandId_descriptor(), value);
}
inline bool SystemCommandId_Parse(
    const ::std::string& name, SystemCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemCommandId>(
    SystemCommandId_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace Mcsf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< Mcsf::SystemCommandId>() {
  return Mcsf::SystemCommandId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Mcsf_5fSysCommandDef_2eproto__INCLUDED
