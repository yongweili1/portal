/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_McsfNetBase(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_McsfNetBase(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_McsfNetBase(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#include "mcsf_swig_string_util.h"
#include "mcsf_swig_sharedarray_util.h"
#include "mcsf_netbase_interface.h"
#include "mcsf_netbase_command_context.h"
#include "mcsf_netbase_senddata_context.h"
#include "mcsf_netbase_iasync_result.h"
#include "mcsf_netbase_ibigdata_handler.h"
#include "mcsf_netbase_iclr_cmd_handler.h"
#include "mcsf_netbase_icmd_callback_handler.h"
#include "mcsf_netbase_icommunication_proxy.h"
#include "mcsf_netbase_ievent_handler.h"
#include "mcsf_netbase_isync_result.h"
#include "mcsf_communication_proxy.h"
#include "mcsf_communication_proxy_factory.h"
#include "mcsf_logger_message_export.h"
#include "mcsf_communication_node_name.h"


#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "mcsf_netbase_wrap.h"

SwigDirector_ICommandCallbackHandler::SwigDirector_ICommandCallbackHandler() : Mcsf::ICommandCallbackHandler(), Swig::Director() {
  swig_init_callbacks();
}

int SwigDirector_ICommandCallbackHandler::HandleReply(Mcsf::IAsyncResult const *pAsyncResult) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpAsyncResult = 0 ;
  
  if (!swig_callbackHandleReply) {
    throw Swig::DirectorPureVirtualException("Mcsf::ICommandCallbackHandler::HandleReply");
  } else {
    jpAsyncResult = (void *) pAsyncResult; 
    jresult = (int) swig_callbackHandleReply(jpAsyncResult);
    c_result = (int)jresult; 
  }
  return c_result;
}

SwigDirector_ICommandCallbackHandler::~SwigDirector_ICommandCallbackHandler() {
  
}


void SwigDirector_ICommandCallbackHandler::swig_connect_director(SWIG_Callback0_t callbackHandleReply) {
  swig_callbackHandleReply = callbackHandleReply;
}

void SwigDirector_ICommandCallbackHandler::swig_init_callbacks() {
  swig_callbackHandleReply = 0;
}

SwigDirector_ICommandCallbackHandlerEx::SwigDirector_ICommandCallbackHandlerEx() : Mcsf::ICommandCallbackHandlerEx(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ICommandCallbackHandlerEx::~SwigDirector_ICommandCallbackHandlerEx() {
  
}


void SwigDirector_ICommandCallbackHandlerEx::HandleReply(boost::shared_ptr< Mcsf::IAsyncResult > pAsyncResult) {
  void * jpAsyncResult  ;
  
  if (!swig_callbackHandleReply) {
    throw Swig::DirectorPureVirtualException("Mcsf::ICommandCallbackHandlerEx::HandleReply");
  } else {
    jpAsyncResult = (void *)&pAsyncResult; 
    swig_callbackHandleReply(jpAsyncResult);
  }
}

void SwigDirector_ICommandCallbackHandlerEx::swig_connect_director(SWIG_Callback0_t callbackHandleReply) {
  swig_callbackHandleReply = callbackHandleReply;
}

void SwigDirector_ICommandCallbackHandlerEx::swig_init_callbacks() {
  swig_callbackHandleReply = 0;
}

SwigDirector_ICommandHandler::SwigDirector_ICommandHandler() : Mcsf::ICommandHandler(), Swig::Director() {
  swig_init_callbacks();
}

int SwigDirector_ICommandHandler::HandleCommand(Mcsf::CommandContext const *pContext, std::string *pReplyObject) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpContext = 0 ;
  void * jpReplyObject = 0 ;
  
  if (!swig_callbackHandleCommand) {
    throw Swig::DirectorPureVirtualException("Mcsf::ICommandHandler::HandleCommand");
  } else {
    jpContext = (void *) pContext; 
    jpReplyObject = (void *) pReplyObject; 
    jresult = (int) swig_callbackHandleCommand(jpContext, jpReplyObject);
    c_result = (int)jresult; 
  }
  return c_result;
}

SwigDirector_ICommandHandler::~SwigDirector_ICommandHandler() {
  
}


void SwigDirector_ICommandHandler::swig_connect_director(SWIG_Callback0_t callbackHandleCommand) {
  swig_callbackHandleCommand = callbackHandleCommand;
}

void SwigDirector_ICommandHandler::swig_init_callbacks() {
  swig_callbackHandleCommand = 0;
}

SwigDirector_ICommandHandlerEx::SwigDirector_ICommandHandlerEx() : Mcsf::ICommandHandlerEx(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_ICommandHandlerEx::HandleCommand(boost::shared_ptr< Mcsf::ICommandContextEx > pContext) {
  void * jpContext  ;
  
  if (!swig_callbackHandleCommand) {
    throw Swig::DirectorPureVirtualException("Mcsf::ICommandHandlerEx::HandleCommand");
  } else {
    jpContext = (void *)&pContext; 
    swig_callbackHandleCommand(jpContext);
  }
}

SwigDirector_ICommandHandlerEx::~SwigDirector_ICommandHandlerEx() {
  
}


void SwigDirector_ICommandHandlerEx::swig_connect_director(SWIG_Callback0_t callbackHandleCommand) {
  swig_callbackHandleCommand = callbackHandleCommand;
}

void SwigDirector_ICommandHandlerEx::swig_init_callbacks() {
  swig_callbackHandleCommand = 0;
}

SwigDirector_IDataHandler::SwigDirector_IDataHandler() : Mcsf::IDataHandler(), Swig::Director() {
  swig_init_callbacks();
}

int SwigDirector_IDataHandler::HandleDataTrans(void *pRawData, size_t iLen) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpRawData = 0 ;
  unsigned long jiLen  ;
  
  if (!swig_callbackHandleDataTrans) {
    throw Swig::DirectorPureVirtualException("Mcsf::IDataHandler::HandleDataTrans");
  } else {
    jpRawData = (void *) pRawData; 
    jiLen = iLen;
    jresult = (int) swig_callbackHandleDataTrans(jpRawData, jiLen);
    c_result = (int)jresult; 
  }
  return c_result;
}

SwigDirector_IDataHandler::~SwigDirector_IDataHandler() {
  
}


void SwigDirector_IDataHandler::swig_connect_director(SWIG_Callback0_t callbackHandleDataTrans) {
  swig_callbackHandleDataTrans = callbackHandleDataTrans;
}

void SwigDirector_IDataHandler::swig_init_callbacks() {
  swig_callbackHandleDataTrans = 0;
}

SwigDirector_IDataHandlerEx::SwigDirector_IDataHandlerEx() : Mcsf::IDataHandlerEx(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_IDataHandlerEx::~SwigDirector_IDataHandlerEx() {
  
}


void SwigDirector_IDataHandlerEx::HandleDataTrans(boost::shared_ptr< Mcsf::SendDataContextEx > pDataContext) {
  void * jpDataContext  ;
  
  if (!swig_callbackHandleDataTrans) {
    throw Swig::DirectorPureVirtualException("Mcsf::IDataHandlerEx::HandleDataTrans");
  } else {
    jpDataContext = (void *)&pDataContext; 
    swig_callbackHandleDataTrans(jpDataContext);
  }
}

void SwigDirector_IDataHandlerEx::swig_connect_director(SWIG_Callback0_t callbackHandleDataTrans) {
  swig_callbackHandleDataTrans = callbackHandleDataTrans;
}

void SwigDirector_IDataHandlerEx::swig_init_callbacks() {
  swig_callbackHandleDataTrans = 0;
}

SwigDirector_ICLRCommandHandler::SwigDirector_ICLRCommandHandler() : Mcsf::ICLRCommandHandler(), Swig::Director() {
  swig_init_callbacks();
}

int SwigDirector_ICLRCommandHandler::HandleCommand(Mcsf::CommandContext const *pContext, std::string *pReplyObject) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpContext = 0 ;
  void * jpReplyObject = 0 ;
  
  if (!swig_callbackHandleCommand) {
    return Mcsf::ICLRCommandHandler::HandleCommand(pContext,pReplyObject);
  } else {
    jpContext = (void *) pContext; 
    jpReplyObject = (void *) pReplyObject; 
    jresult = (int) swig_callbackHandleCommand(jpContext, jpReplyObject);
    c_result = (int)jresult; 
  }
  return c_result;
}

SwigDirector_ICLRCommandHandler::~SwigDirector_ICLRCommandHandler() {
  
}


int SwigDirector_ICLRCommandHandler::HandleCommandCLR(Mcsf::CommandContext const *pContext, Mcsf::ISyncResult *pSyncResult) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpContext = 0 ;
  void * jpSyncResult = 0 ;
  
  if (!swig_callbackHandleCommandCLR) {
    throw Swig::DirectorPureVirtualException("Mcsf::ICLRCommandHandler::HandleCommandCLR");
  } else {
    jpContext = (void *) pContext; 
    jpSyncResult = (void *) pSyncResult; 
    jresult = (int) swig_callbackHandleCommandCLR(jpContext, jpSyncResult);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_ICLRCommandHandler::swig_connect_director(SWIG_Callback0_t callbackHandleCommand, SWIG_Callback1_t callbackHandleCommandCLR) {
  swig_callbackHandleCommand = callbackHandleCommand;
  swig_callbackHandleCommandCLR = callbackHandleCommandCLR;
}

void SwigDirector_ICLRCommandHandler::swig_init_callbacks() {
  swig_callbackHandleCommand = 0;
  swig_callbackHandleCommandCLR = 0;
}

SwigDirector_ICLRCommandHandlerEx::SwigDirector_ICLRCommandHandlerEx() : Mcsf::ICLRCommandHandlerEx(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_ICLRCommandHandlerEx::HandleCommand(boost::shared_ptr< Mcsf::ICommandContextEx > pContext) {
  void * jpContext  ;
  
  if (!swig_callbackHandleCommand) {
    Mcsf::ICLRCommandHandlerEx::HandleCommand(pContext);
    return;
  } else {
    jpContext = (void *)&pContext; 
    swig_callbackHandleCommand(jpContext);
  }
}

SwigDirector_ICLRCommandHandlerEx::~SwigDirector_ICLRCommandHandlerEx() {
  
}


void SwigDirector_ICLRCommandHandlerEx::HandleCommandCLR(Mcsf::ICommandContextEx const *pContext) {
  void * jpContext = 0 ;
  
  if (!swig_callbackHandleCommandCLR) {
    throw Swig::DirectorPureVirtualException("Mcsf::ICLRCommandHandlerEx::HandleCommandCLR");
  } else {
    jpContext = (void *) pContext; 
    swig_callbackHandleCommandCLR(jpContext);
  }
}

void SwigDirector_ICLRCommandHandlerEx::swig_connect_director(SWIG_Callback0_t callbackHandleCommand, SWIG_Callback1_t callbackHandleCommandCLR) {
  swig_callbackHandleCommand = callbackHandleCommand;
  swig_callbackHandleCommandCLR = callbackHandleCommandCLR;
}

void SwigDirector_ICLRCommandHandlerEx::swig_init_callbacks() {
  swig_callbackHandleCommand = 0;
  swig_callbackHandleCommandCLR = 0;
}

SwigDirector_ICLRCommandCallbackHandlerEx::SwigDirector_ICLRCommandCallbackHandlerEx() : Mcsf::ICLRCommandCallbackHandlerEx(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ICLRCommandCallbackHandlerEx::~SwigDirector_ICLRCommandCallbackHandlerEx() {
  
}


void SwigDirector_ICLRCommandCallbackHandlerEx::HandleReply(boost::shared_ptr< Mcsf::IAsyncResult > pAsyncResult) {
  void * jpAsyncResult  ;
  
  if (!swig_callbackHandleReply) {
    Mcsf::ICLRCommandCallbackHandlerEx::HandleReply(pAsyncResult);
    return;
  } else {
    jpAsyncResult = (void *)&pAsyncResult; 
    swig_callbackHandleReply(jpAsyncResult);
  }
}

void SwigDirector_ICLRCommandCallbackHandlerEx::HandleReplyCLR(Mcsf::IAsyncResult const *pAsyncResult) {
  void * jpAsyncResult = 0 ;
  
  if (!swig_callbackHandleReplyCLR) {
    throw Swig::DirectorPureVirtualException("Mcsf::ICLRCommandCallbackHandlerEx::HandleReplyCLR");
  } else {
    jpAsyncResult = (void *) pAsyncResult; 
    swig_callbackHandleReplyCLR(jpAsyncResult);
  }
}

void SwigDirector_ICLRCommandCallbackHandlerEx::swig_connect_director(SWIG_Callback0_t callbackHandleReply, SWIG_Callback1_t callbackHandleReplyCLR) {
  swig_callbackHandleReply = callbackHandleReply;
  swig_callbackHandleReplyCLR = callbackHandleReplyCLR;
}

void SwigDirector_ICLRCommandCallbackHandlerEx::swig_init_callbacks() {
  swig_callbackHandleReply = 0;
  swig_callbackHandleReplyCLR = 0;
}

SwigDirector_ICLRDataHandlerEx::SwigDirector_ICLRDataHandlerEx() : Mcsf::ICLRDataHandlerEx(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ICLRDataHandlerEx::~SwigDirector_ICLRDataHandlerEx() {
  
}


void SwigDirector_ICLRDataHandlerEx::HandleDataTrans(boost::shared_ptr< Mcsf::SendDataContextEx > pDataContext) {
  void * jpDataContext  ;
  
  if (!swig_callbackHandleDataTrans) {
    Mcsf::ICLRDataHandlerEx::HandleDataTrans(pDataContext);
    return;
  } else {
    jpDataContext = (void *)&pDataContext; 
    swig_callbackHandleDataTrans(jpDataContext);
  }
}

void SwigDirector_ICLRDataHandlerEx::HandleDataTransCLR(Mcsf::SendDataContextEx const *pDataContext) {
  void * jpDataContext = 0 ;
  
  if (!swig_callbackHandleDataTransCLR) {
    throw Swig::DirectorPureVirtualException("Mcsf::ICLRDataHandlerEx::HandleDataTransCLR");
  } else {
    jpDataContext = (void *) pDataContext; 
    swig_callbackHandleDataTransCLR(jpDataContext);
  }
}

void SwigDirector_ICLRDataHandlerEx::swig_connect_director(SWIG_Callback0_t callbackHandleDataTrans, SWIG_Callback1_t callbackHandleDataTransCLR) {
  swig_callbackHandleDataTrans = callbackHandleDataTrans;
  swig_callbackHandleDataTransCLR = callbackHandleDataTransCLR;
}

void SwigDirector_ICLRDataHandlerEx::swig_init_callbacks() {
  swig_callbackHandleDataTrans = 0;
  swig_callbackHandleDataTransCLR = 0;
}

SwigDirector_IEventHandler::SwigDirector_IEventHandler() : Mcsf::IEventHandler(), Swig::Director() {
  swig_init_callbacks();
}

int SwigDirector_IEventHandler::HandleEvent(std::string const &sSender, int iChannelId, int iEventId, std::string const &sEvent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jsSender = 0 ;
  int jiChannelId  ;
  int jiEventId  ;
  void * jsEvent = 0 ;
  
  if (!swig_callbackHandleEvent) {
    throw Swig::DirectorPureVirtualException("Mcsf::IEventHandler::HandleEvent");
  } else {
    jsSender = (std::string *) &sSender; 
    jiChannelId = iChannelId;
    jiEventId = iEventId;
    jsEvent = (std::string *) &sEvent; 
    jresult = (int) swig_callbackHandleEvent(jsSender, jiChannelId, jiEventId, jsEvent);
    c_result = (int)jresult; 
  }
  return c_result;
}

SwigDirector_IEventHandler::~SwigDirector_IEventHandler() {
  
}


void SwigDirector_IEventHandler::swig_connect_director(SWIG_Callback0_t callbackHandleEvent) {
  swig_callbackHandleEvent = callbackHandleEvent;
}

void SwigDirector_IEventHandler::swig_init_callbacks() {
  swig_callbackHandleEvent = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_SwigStringUtil_GetSize(void * jarg1) {
  int jresult ;
  std::string *arg1 = (std::string *) 0 ;
  int result;
  
  arg1 = (std::string *)jarg1; 
  result = (int)Mcsf::internal::SwigStringUtil::GetSize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwigStringUtil_StringAsArray(void * jarg1) {
  void * jresult ;
  std::string *arg1 = (std::string *) 0 ;
  void *result = 0 ;
  
  arg1 = (std::string *)jarg1; 
  result = (void *)Mcsf::internal::SwigStringUtil::StringAsArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigStringUtil_ResizeUninitialized(void * jarg1, unsigned long jarg2) {
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  arg1 = (std::string *)jarg1; 
  arg2 = (size_t)jarg2; 
  Mcsf::internal::SwigStringUtil::ResizeUninitialized(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwigStringUtil_NewStdString() {
  void * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *)Mcsf::internal::SwigStringUtil::NewStdString();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigStringUtil_DestroyStdString(void * jarg1) {
  std::string *arg1 = (std::string *) 0 ;
  
  arg1 = (std::string *)jarg1; 
  Mcsf::internal::SwigStringUtil::DestroyStdString(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwigStringUtil_ToCStr(void * jarg1) {
  char * jresult ;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  arg1 = (std::string *)jarg1; 
  result = (char *)Mcsf::internal::SwigStringUtil::ToCStr(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwigStringUtil_ToStdString(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  std::string result;
  
  arg1 = (char *)jarg1; 
  result = Mcsf::internal::SwigStringUtil::ToStdString((char const *)arg1);
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SwigStringUtil() {
  void * jresult ;
  Mcsf::internal::SwigStringUtil *result = 0 ;
  
  result = (Mcsf::internal::SwigStringUtil *)new Mcsf::internal::SwigStringUtil();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SwigStringUtil(void * jarg1) {
  Mcsf::internal::SwigStringUtil *arg1 = (Mcsf::internal::SwigStringUtil *) 0 ;
  
  arg1 = (Mcsf::internal::SwigStringUtil *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommandContext_sReceiver_set(void * jarg1, void * jarg2) {
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->sReceiver = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommandContext_sReceiver_get(void * jarg1) {
  void * jresult ;
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  result = (std::string *) & ((arg1)->sReceiver);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommandContext_sSender_set(void * jarg1, void * jarg2) {
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->sSender = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommandContext_sSender_get(void * jarg1) {
  void * jresult ;
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  result = (std::string *) & ((arg1)->sSender);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommandContext_iCommandId_set(void * jarg1, int jarg2) {
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  int arg2 ;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iCommandId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommandContext_iCommandId_get(void * jarg1) {
  int jresult ;
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  int result;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  result = (int) ((arg1)->iCommandId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommandContext_sSerializeObject_set(void * jarg1, void * jarg2) {
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->sSerializeObject = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommandContext_sSerializeObject_get(void * jarg1) {
  void * jresult ;
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  result = (std::string *) & ((arg1)->sSerializeObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommandContext_pCommandCallback_set(void * jarg1, void * jarg2) {
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  Mcsf::ICommandCallbackHandler *arg2 = (Mcsf::ICommandCallbackHandler *) 0 ;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  arg2 = (Mcsf::ICommandCallbackHandler *)jarg2; 
  if (arg1) (arg1)->pCommandCallback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommandContext_pCommandCallback_get(void * jarg1) {
  void * jresult ;
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  Mcsf::ICommandCallbackHandler *result = 0 ;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  result = (Mcsf::ICommandCallbackHandler *) ((arg1)->pCommandCallback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommandContext_iWaitTime_set(void * jarg1, unsigned int jarg2) {
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->iWaitTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandContext_iWaitTime_get(void * jarg1) {
  unsigned int jresult ;
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  unsigned int result;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  result = (unsigned int) ((arg1)->iWaitTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommandContext() {
  void * jresult ;
  Mcsf::CommandContext *result = 0 ;
  
  result = (Mcsf::CommandContext *)new Mcsf::CommandContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommandContext(void * jarg1) {
  Mcsf::CommandContext *arg1 = (Mcsf::CommandContext *) 0 ;
  
  arg1 = (Mcsf::CommandContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICommandContextEx_GetReceiver(void * jarg1) {
  void * jresult ;
  Mcsf::ICommandContextEx *arg1 = (Mcsf::ICommandContextEx *) 0 ;
  std::string result;
  
  arg1 = (Mcsf::ICommandContextEx *)jarg1; 
  result = ((Mcsf::ICommandContextEx const *)arg1)->GetReceiver();
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICommandContextEx_GetSender(void * jarg1) {
  void * jresult ;
  Mcsf::ICommandContextEx *arg1 = (Mcsf::ICommandContextEx *) 0 ;
  std::string result;
  
  arg1 = (Mcsf::ICommandContextEx *)jarg1; 
  result = ((Mcsf::ICommandContextEx const *)arg1)->GetSender();
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommandContextEx_GetCommandId(void * jarg1) {
  int jresult ;
  Mcsf::ICommandContextEx *arg1 = (Mcsf::ICommandContextEx *) 0 ;
  int result;
  
  arg1 = (Mcsf::ICommandContextEx *)jarg1; 
  result = (int)((Mcsf::ICommandContextEx const *)arg1)->GetCommandId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICommandContextEx_GetSerializeObject(void * jarg1) {
  void * jresult ;
  Mcsf::ICommandContextEx *arg1 = (Mcsf::ICommandContextEx *) 0 ;
  std::string result;
  
  arg1 = (Mcsf::ICommandContextEx *)jarg1; 
  result = ((Mcsf::ICommandContextEx const *)arg1)->GetSerializeObject();
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommandContextEx_Reply(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::ICommandContextEx *arg1 = (Mcsf::ICommandContextEx *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (Mcsf::ICommandContextEx *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (int)((Mcsf::ICommandContextEx const *)arg1)->Reply((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICommandContextEx_Clone(void * jarg1) {
  void * jresult ;
  Mcsf::ICommandContextEx *arg1 = (Mcsf::ICommandContextEx *) 0 ;
  Mcsf::ICommandContextEx *result = 0 ;
  
  arg1 = (Mcsf::ICommandContextEx *)jarg1; 
  result = (Mcsf::ICommandContextEx *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommandContextEx_Destory(void * jarg1) {
  Mcsf::ICommandContextEx *arg1 = (Mcsf::ICommandContextEx *) 0 ;
  
  arg1 = (Mcsf::ICommandContextEx *)jarg1; 
  (arg1)->Destory();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICommandContextEx(void * jarg1) {
  Mcsf::ICommandContextEx *arg1 = (Mcsf::ICommandContextEx *) 0 ;
  
  arg1 = (Mcsf::ICommandContextEx *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommandCallbackHandler_HandleReply(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::ICommandCallbackHandler *arg1 = (Mcsf::ICommandCallbackHandler *) 0 ;
  Mcsf::IAsyncResult *arg2 = (Mcsf::IAsyncResult *) 0 ;
  int result;
  
  arg1 = (Mcsf::ICommandCallbackHandler *)jarg1; 
  arg2 = (Mcsf::IAsyncResult *)jarg2; 
  result = (int)(arg1)->HandleReply((Mcsf::IAsyncResult const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICommandCallbackHandler(void * jarg1) {
  Mcsf::ICommandCallbackHandler *arg1 = (Mcsf::ICommandCallbackHandler *) 0 ;
  
  arg1 = (Mcsf::ICommandCallbackHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICommandCallbackHandler() {
  void * jresult ;
  Mcsf::ICommandCallbackHandler *result = 0 ;
  
  result = (Mcsf::ICommandCallbackHandler *)new SwigDirector_ICommandCallbackHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommandCallbackHandler_director_connect(void *objarg, SwigDirector_ICommandCallbackHandler::SWIG_Callback0_t callback0) {
  Mcsf::ICommandCallbackHandler *obj = (Mcsf::ICommandCallbackHandler *)objarg;
  SwigDirector_ICommandCallbackHandler *director = dynamic_cast<SwigDirector_ICommandCallbackHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICommandCallbackHandlerEx(void * jarg1) {
  Mcsf::ICommandCallbackHandlerEx *arg1 = (Mcsf::ICommandCallbackHandlerEx *) 0 ;
  
  arg1 = (Mcsf::ICommandCallbackHandlerEx *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommandCallbackHandlerEx_HandleReply(void * jarg1, void * jarg2) {
  Mcsf::ICommandCallbackHandlerEx *arg1 = (Mcsf::ICommandCallbackHandlerEx *) 0 ;
  SwigValueWrapper< boost::shared_ptr< Mcsf::IAsyncResult > > arg2 ;
  boost::shared_ptr< Mcsf::IAsyncResult > *argp2 ;
  
  arg1 = (Mcsf::ICommandCallbackHandlerEx *)jarg1; 
  argp2 = (boost::shared_ptr< Mcsf::IAsyncResult > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::IAsyncResult >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HandleReply(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICommandCallbackHandlerEx() {
  void * jresult ;
  Mcsf::ICommandCallbackHandlerEx *result = 0 ;
  
  result = (Mcsf::ICommandCallbackHandlerEx *)new SwigDirector_ICommandCallbackHandlerEx();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommandCallbackHandlerEx_director_connect(void *objarg, SwigDirector_ICommandCallbackHandlerEx::SWIG_Callback0_t callback0) {
  Mcsf::ICommandCallbackHandlerEx *obj = (Mcsf::ICommandCallbackHandlerEx *)objarg;
  SwigDirector_ICommandCallbackHandlerEx *director = dynamic_cast<SwigDirector_ICommandCallbackHandlerEx *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommandHandler_HandleCommand(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Mcsf::ICommandHandler *arg1 = (Mcsf::ICommandHandler *) 0 ;
  Mcsf::CommandContext *arg2 = (Mcsf::CommandContext *) 0 ;
  std::string *arg3 = (std::string *) 0 ;
  int result;
  
  arg1 = (Mcsf::ICommandHandler *)jarg1; 
  arg2 = (Mcsf::CommandContext *)jarg2; 
  arg3 = (std::string *)jarg3; 
  result = (int)(arg1)->HandleCommand((Mcsf::CommandContext const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICommandHandler(void * jarg1) {
  Mcsf::ICommandHandler *arg1 = (Mcsf::ICommandHandler *) 0 ;
  
  arg1 = (Mcsf::ICommandHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICommandHandler() {
  void * jresult ;
  Mcsf::ICommandHandler *result = 0 ;
  
  result = (Mcsf::ICommandHandler *)new SwigDirector_ICommandHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommandHandler_director_connect(void *objarg, SwigDirector_ICommandHandler::SWIG_Callback0_t callback0) {
  Mcsf::ICommandHandler *obj = (Mcsf::ICommandHandler *)objarg;
  SwigDirector_ICommandHandler *director = dynamic_cast<SwigDirector_ICommandHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommandHandlerEx_HandleCommand(void * jarg1, void * jarg2) {
  Mcsf::ICommandHandlerEx *arg1 = (Mcsf::ICommandHandlerEx *) 0 ;
  boost::shared_ptr< Mcsf::ICommandContextEx > arg2 ;
  boost::shared_ptr< Mcsf::ICommandContextEx > *argp2 ;
  
  arg1 = (Mcsf::ICommandHandlerEx *)jarg1; 
  argp2 = (boost::shared_ptr< Mcsf::ICommandContextEx > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::ICommandContextEx >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HandleCommand(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICommandHandlerEx(void * jarg1) {
  Mcsf::ICommandHandlerEx *arg1 = (Mcsf::ICommandHandlerEx *) 0 ;
  
  arg1 = (Mcsf::ICommandHandlerEx *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICommandHandlerEx() {
  void * jresult ;
  Mcsf::ICommandHandlerEx *result = 0 ;
  
  result = (Mcsf::ICommandHandlerEx *)new SwigDirector_ICommandHandlerEx();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommandHandlerEx_director_connect(void *objarg, SwigDirector_ICommandHandlerEx::SWIG_Callback0_t callback0) {
  Mcsf::ICommandHandlerEx *obj = (Mcsf::ICommandHandlerEx *)objarg;
  SwigDirector_ICommandHandlerEx *director = dynamic_cast<SwigDirector_ICommandHandlerEx *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAsyncResult_GetMarshalObject(void * jarg1) {
  void * jresult ;
  Mcsf::IAsyncResult *arg1 = (Mcsf::IAsyncResult *) 0 ;
  std::string result;
  
  arg1 = (Mcsf::IAsyncResult *)jarg1; 
  result = ((Mcsf::IAsyncResult const *)arg1)->GetMarshalObject();
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAsyncResult_IsCompleted(void * jarg1) {
  unsigned int jresult ;
  Mcsf::IAsyncResult *arg1 = (Mcsf::IAsyncResult *) 0 ;
  bool result;
  
  arg1 = (Mcsf::IAsyncResult *)jarg1; 
  result = (bool)((Mcsf::IAsyncResult const *)arg1)->IsCompleted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAsyncResult_GetCallResult(void * jarg1) {
  int jresult ;
  Mcsf::IAsyncResult *arg1 = (Mcsf::IAsyncResult *) 0 ;
  Mcsf::IAsyncResult::CallResult result;
  
  arg1 = (Mcsf::IAsyncResult *)jarg1; 
  result = (Mcsf::IAsyncResult::CallResult)((Mcsf::IAsyncResult const *)arg1)->GetCallResult();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAsyncResult(void * jarg1) {
  Mcsf::IAsyncResult *arg1 = (Mcsf::IAsyncResult *) 0 ;
  
  arg1 = (Mcsf::IAsyncResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAsyncResult_Clone(void * jarg1) {
  void * jresult ;
  Mcsf::IAsyncResult *arg1 = (Mcsf::IAsyncResult *) 0 ;
  Mcsf::IAsyncResult *result = 0 ;
  
  arg1 = (Mcsf::IAsyncResult *)jarg1; 
  result = (Mcsf::IAsyncResult *)((Mcsf::IAsyncResult const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAsyncResult_Destory(void * jarg1) {
  Mcsf::IAsyncResult *arg1 = (Mcsf::IAsyncResult *) 0 ;
  
  arg1 = (Mcsf::IAsyncResult *)jarg1; 
  (arg1)->Destory();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContext_sReceiver_set(void * jarg1, void * jarg2) {
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->sReceiver = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendDataContext_sReceiver_get(void * jarg1) {
  void * jresult ;
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  result = (std::string *) & ((arg1)->sReceiver);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContext_sSender_set(void * jarg1, void * jarg2) {
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->sSender = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendDataContext_sSender_get(void * jarg1) {
  void * jresult ;
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  result = (std::string *) & ((arg1)->sSender);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContext_iCommandId_set(void * jarg1, int jarg2) {
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  int arg2 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iCommandId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SendDataContext_iCommandId_get(void * jarg1) {
  int jresult ;
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  int result;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  result = (int) ((arg1)->iCommandId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContext_sSerailizedObject_set(void * jarg1, void * jarg2) {
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->sSerailizedObject = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendDataContext_sSerailizedObject_get(void * jarg1) {
  void * jresult ;
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  result = (std::string *) & ((arg1)->sSerailizedObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContext_iLen_set(void * jarg1, unsigned int jarg2) {
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->iLen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendDataContext_iLen_get(void * jarg1) {
  unsigned int jresult ;
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  unsigned int result;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  result = (unsigned int) ((arg1)->iLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContext_pRawData_set(void * jarg1, void * jarg2) {
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pRawData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendDataContext_pRawData_get(void * jarg1) {
  void * jresult ;
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  void *result = 0 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  result = (void *) ((arg1)->pRawData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContext_iWaitTime_set(void * jarg1, int jarg2) {
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  int arg2 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iWaitTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SendDataContext_iWaitTime_get(void * jarg1) {
  int jresult ;
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  int result;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  result = (int) ((arg1)->iWaitTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SendDataContext() {
  void * jresult ;
  Mcsf::SendDataContext *result = 0 ;
  
  result = (Mcsf::SendDataContext *)new Mcsf::SendDataContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContext_AllocMem(void * jarg1, int jarg2) {
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  int arg2 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AllocMem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContext_DestoryMem(void * jarg1) {
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  (arg1)->DestoryMem();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SendDataContext(void * jarg1) {
  Mcsf::SendDataContext *arg1 = (Mcsf::SendDataContext *) 0 ;
  
  arg1 = (Mcsf::SendDataContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContextEx_sReceiver_set(void * jarg1, void * jarg2) {
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->sReceiver = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendDataContextEx_sReceiver_get(void * jarg1) {
  void * jresult ;
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  result = (std::string *) & ((arg1)->sReceiver);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContextEx_sSender_set(void * jarg1, void * jarg2) {
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->sSender = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendDataContextEx_sSender_get(void * jarg1) {
  void * jresult ;
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  result = (std::string *) & ((arg1)->sSender);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContextEx_iCommandId_set(void * jarg1, int jarg2) {
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  int arg2 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iCommandId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SendDataContextEx_iCommandId_get(void * jarg1) {
  int jresult ;
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  int result;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  result = (int) ((arg1)->iCommandId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContextEx_sSerailizedObject_set(void * jarg1, void * jarg2) {
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->sSerailizedObject = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendDataContextEx_sSerailizedObject_get(void * jarg1) {
  void * jresult ;
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  result = (std::string *) & ((arg1)->sSerailizedObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContextEx_iLen_set(void * jarg1, unsigned int jarg2) {
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->iLen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendDataContextEx_iLen_get(void * jarg1) {
  unsigned int jresult ;
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  unsigned int result;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  result = (unsigned int) ((arg1)->iLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContextEx_pRawData_set(void * jarg1, void * jarg2) {
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  boost::shared_array< char > arg2 ;
  boost::shared_array< char > *argp2 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  argp2 = (boost::shared_array< char > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_array< char >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->pRawData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendDataContextEx_pRawData_get(void * jarg1) {
  void * jresult ;
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  boost::shared_array< char > result;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  result =  ((arg1)->pRawData);
  jresult = new boost::shared_array< char >((const boost::shared_array< char > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContextEx_pCallback_set(void * jarg1, void * jarg2) {
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  boost::shared_ptr< Mcsf::ICommandCallbackHandlerEx > *arg2 = 0 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  arg2 = (boost::shared_ptr< Mcsf::ICommandCallbackHandlerEx > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "boost::shared_ptr< Mcsf::ICommandCallbackHandlerEx > const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->pCallback = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendDataContextEx_pCallback_get(void * jarg1) {
  void * jresult ;
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  boost::shared_ptr< Mcsf::ICommandCallbackHandlerEx > *result = 0 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  result = (boost::shared_ptr< Mcsf::ICommandCallbackHandlerEx > *) & ((arg1)->pCallback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContextEx_iWaitTime_set(void * jarg1, unsigned int jarg2) {
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->iWaitTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendDataContextEx_iWaitTime_get(void * jarg1) {
  unsigned int jresult ;
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  unsigned int result;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  result = (unsigned int) ((arg1)->iWaitTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendDataContextEx_sResponseObject_set(void * jarg1, void * jarg2) {
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  if (arg1) (arg1)->sResponseObject = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendDataContextEx_sResponseObject_get(void * jarg1) {
  void * jresult ;
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  result = (std::string *) & ((arg1)->sResponseObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SendDataContextEx() {
  void * jresult ;
  Mcsf::SendDataContextEx *result = 0 ;
  
  result = (Mcsf::SendDataContextEx *)new Mcsf::SendDataContextEx();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SendDataContextEx(void * jarg1) {
  Mcsf::SendDataContextEx *arg1 = (Mcsf::SendDataContextEx *) 0 ;
  
  arg1 = (Mcsf::SendDataContextEx *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDataHandler_HandleDataTrans(void * jarg1, void * jarg2, unsigned long jarg3) {
  int jresult ;
  Mcsf::IDataHandler *arg1 = (Mcsf::IDataHandler *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int result;
  
  arg1 = (Mcsf::IDataHandler *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (int)(arg1)->HandleDataTrans(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDataHandler(void * jarg1) {
  Mcsf::IDataHandler *arg1 = (Mcsf::IDataHandler *) 0 ;
  
  arg1 = (Mcsf::IDataHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IDataHandler() {
  void * jresult ;
  Mcsf::IDataHandler *result = 0 ;
  
  result = (Mcsf::IDataHandler *)new SwigDirector_IDataHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDataHandler_director_connect(void *objarg, SwigDirector_IDataHandler::SWIG_Callback0_t callback0) {
  Mcsf::IDataHandler *obj = (Mcsf::IDataHandler *)objarg;
  SwigDirector_IDataHandler *director = dynamic_cast<SwigDirector_IDataHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDataHandlerEx(void * jarg1) {
  Mcsf::IDataHandlerEx *arg1 = (Mcsf::IDataHandlerEx *) 0 ;
  
  arg1 = (Mcsf::IDataHandlerEx *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDataHandlerEx_HandleDataTrans(void * jarg1, void * jarg2) {
  Mcsf::IDataHandlerEx *arg1 = (Mcsf::IDataHandlerEx *) 0 ;
  SwigValueWrapper< boost::shared_ptr< Mcsf::SendDataContextEx > > arg2 ;
  boost::shared_ptr< Mcsf::SendDataContextEx > *argp2 ;
  
  arg1 = (Mcsf::IDataHandlerEx *)jarg1; 
  argp2 = (boost::shared_ptr< Mcsf::SendDataContextEx > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::SendDataContextEx >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HandleDataTrans(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IDataHandlerEx() {
  void * jresult ;
  Mcsf::IDataHandlerEx *result = 0 ;
  
  result = (Mcsf::IDataHandlerEx *)new SwigDirector_IDataHandlerEx();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDataHandlerEx_director_connect(void *objarg, SwigDirector_IDataHandlerEx::SWIG_Callback0_t callback0) {
  Mcsf::IDataHandlerEx *obj = (Mcsf::IDataHandlerEx *)objarg;
  SwigDirector_IDataHandlerEx *director = dynamic_cast<SwigDirector_IDataHandlerEx *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICLRCommandHandler_HandleCommandCLR(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Mcsf::ICLRCommandHandler *arg1 = (Mcsf::ICLRCommandHandler *) 0 ;
  Mcsf::CommandContext *arg2 = (Mcsf::CommandContext *) 0 ;
  Mcsf::ISyncResult *arg3 = (Mcsf::ISyncResult *) 0 ;
  int result;
  
  arg1 = (Mcsf::ICLRCommandHandler *)jarg1; 
  arg2 = (Mcsf::CommandContext *)jarg2; 
  arg3 = (Mcsf::ISyncResult *)jarg3; 
  result = (int)(arg1)->HandleCommandCLR((Mcsf::CommandContext const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICLRCommandHandler_HandleCommand(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Mcsf::ICLRCommandHandler *arg1 = (Mcsf::ICLRCommandHandler *) 0 ;
  Mcsf::CommandContext *arg2 = (Mcsf::CommandContext *) 0 ;
  std::string *arg3 = (std::string *) 0 ;
  int result;
  
  arg1 = (Mcsf::ICLRCommandHandler *)jarg1; 
  arg2 = (Mcsf::CommandContext *)jarg2; 
  arg3 = (std::string *)jarg3; 
  result = (int)(arg1)->HandleCommand((Mcsf::CommandContext const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICLRCommandHandler_HandleCommandSwigExplicitICLRCommandHandler(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Mcsf::ICLRCommandHandler *arg1 = (Mcsf::ICLRCommandHandler *) 0 ;
  Mcsf::CommandContext *arg2 = (Mcsf::CommandContext *) 0 ;
  std::string *arg3 = (std::string *) 0 ;
  int result;
  
  arg1 = (Mcsf::ICLRCommandHandler *)jarg1; 
  arg2 = (Mcsf::CommandContext *)jarg2; 
  arg3 = (std::string *)jarg3; 
  result = (int)(arg1)->Mcsf::ICLRCommandHandler::HandleCommand((Mcsf::CommandContext const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICLRCommandHandler() {
  void * jresult ;
  Mcsf::ICLRCommandHandler *result = 0 ;
  
  result = (Mcsf::ICLRCommandHandler *)new SwigDirector_ICLRCommandHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICLRCommandHandler(void * jarg1) {
  Mcsf::ICLRCommandHandler *arg1 = (Mcsf::ICLRCommandHandler *) 0 ;
  
  arg1 = (Mcsf::ICLRCommandHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRCommandHandler_director_connect(void *objarg, SwigDirector_ICLRCommandHandler::SWIG_Callback0_t callback0, SwigDirector_ICLRCommandHandler::SWIG_Callback1_t callback1) {
  Mcsf::ICLRCommandHandler *obj = (Mcsf::ICLRCommandHandler *)objarg;
  SwigDirector_ICLRCommandHandler *director = dynamic_cast<SwigDirector_ICLRCommandHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICLRCommandHandlerEx(void * jarg1) {
  Mcsf::ICLRCommandHandlerEx *arg1 = (Mcsf::ICLRCommandHandlerEx *) 0 ;
  
  arg1 = (Mcsf::ICLRCommandHandlerEx *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRCommandHandlerEx_HandleCommandCLR(void * jarg1, void * jarg2) {
  Mcsf::ICLRCommandHandlerEx *arg1 = (Mcsf::ICLRCommandHandlerEx *) 0 ;
  Mcsf::ICommandContextEx *arg2 = (Mcsf::ICommandContextEx *) 0 ;
  
  arg1 = (Mcsf::ICLRCommandHandlerEx *)jarg1; 
  arg2 = (Mcsf::ICommandContextEx *)jarg2; 
  (arg1)->HandleCommandCLR((Mcsf::ICommandContextEx const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRCommandHandlerEx_HandleCommand(void * jarg1, void * jarg2) {
  Mcsf::ICLRCommandHandlerEx *arg1 = (Mcsf::ICLRCommandHandlerEx *) 0 ;
  boost::shared_ptr< Mcsf::ICommandContextEx > arg2 ;
  boost::shared_ptr< Mcsf::ICommandContextEx > *argp2 ;
  
  arg1 = (Mcsf::ICLRCommandHandlerEx *)jarg1; 
  argp2 = (boost::shared_ptr< Mcsf::ICommandContextEx > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::ICommandContextEx >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HandleCommand(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRCommandHandlerEx_HandleCommandSwigExplicitICLRCommandHandlerEx(void * jarg1, void * jarg2) {
  Mcsf::ICLRCommandHandlerEx *arg1 = (Mcsf::ICLRCommandHandlerEx *) 0 ;
  boost::shared_ptr< Mcsf::ICommandContextEx > arg2 ;
  boost::shared_ptr< Mcsf::ICommandContextEx > *argp2 ;
  
  arg1 = (Mcsf::ICLRCommandHandlerEx *)jarg1; 
  argp2 = (boost::shared_ptr< Mcsf::ICommandContextEx > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::ICommandContextEx >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Mcsf::ICLRCommandHandlerEx::HandleCommand(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICLRCommandHandlerEx() {
  void * jresult ;
  Mcsf::ICLRCommandHandlerEx *result = 0 ;
  
  result = (Mcsf::ICLRCommandHandlerEx *)new SwigDirector_ICLRCommandHandlerEx();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRCommandHandlerEx_director_connect(void *objarg, SwigDirector_ICLRCommandHandlerEx::SWIG_Callback0_t callback0, SwigDirector_ICLRCommandHandlerEx::SWIG_Callback1_t callback1) {
  Mcsf::ICLRCommandHandlerEx *obj = (Mcsf::ICLRCommandHandlerEx *)objarg;
  SwigDirector_ICLRCommandHandlerEx *director = dynamic_cast<SwigDirector_ICLRCommandHandlerEx *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRCommandCallbackHandlerEx_HandleReply(void * jarg1, void * jarg2) {
  Mcsf::ICLRCommandCallbackHandlerEx *arg1 = (Mcsf::ICLRCommandCallbackHandlerEx *) 0 ;
  SwigValueWrapper< boost::shared_ptr< Mcsf::IAsyncResult > > arg2 ;
  boost::shared_ptr< Mcsf::IAsyncResult > *argp2 ;
  
  arg1 = (Mcsf::ICLRCommandCallbackHandlerEx *)jarg1; 
  argp2 = (boost::shared_ptr< Mcsf::IAsyncResult > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::IAsyncResult >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HandleReply(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRCommandCallbackHandlerEx_HandleReplySwigExplicitICLRCommandCallbackHandlerEx(void * jarg1, void * jarg2) {
  Mcsf::ICLRCommandCallbackHandlerEx *arg1 = (Mcsf::ICLRCommandCallbackHandlerEx *) 0 ;
  SwigValueWrapper< boost::shared_ptr< Mcsf::IAsyncResult > > arg2 ;
  boost::shared_ptr< Mcsf::IAsyncResult > *argp2 ;
  
  arg1 = (Mcsf::ICLRCommandCallbackHandlerEx *)jarg1; 
  argp2 = (boost::shared_ptr< Mcsf::IAsyncResult > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::IAsyncResult >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Mcsf::ICLRCommandCallbackHandlerEx::HandleReply(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRCommandCallbackHandlerEx_HandleReplyCLR(void * jarg1, void * jarg2) {
  Mcsf::ICLRCommandCallbackHandlerEx *arg1 = (Mcsf::ICLRCommandCallbackHandlerEx *) 0 ;
  Mcsf::IAsyncResult *arg2 = (Mcsf::IAsyncResult *) 0 ;
  
  arg1 = (Mcsf::ICLRCommandCallbackHandlerEx *)jarg1; 
  arg2 = (Mcsf::IAsyncResult *)jarg2; 
  (arg1)->HandleReplyCLR((Mcsf::IAsyncResult const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICLRCommandCallbackHandlerEx() {
  void * jresult ;
  Mcsf::ICLRCommandCallbackHandlerEx *result = 0 ;
  
  result = (Mcsf::ICLRCommandCallbackHandlerEx *)new SwigDirector_ICLRCommandCallbackHandlerEx();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICLRCommandCallbackHandlerEx(void * jarg1) {
  Mcsf::ICLRCommandCallbackHandlerEx *arg1 = (Mcsf::ICLRCommandCallbackHandlerEx *) 0 ;
  
  arg1 = (Mcsf::ICLRCommandCallbackHandlerEx *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRCommandCallbackHandlerEx_director_connect(void *objarg, SwigDirector_ICLRCommandCallbackHandlerEx::SWIG_Callback0_t callback0, SwigDirector_ICLRCommandCallbackHandlerEx::SWIG_Callback1_t callback1) {
  Mcsf::ICLRCommandCallbackHandlerEx *obj = (Mcsf::ICLRCommandCallbackHandlerEx *)objarg;
  SwigDirector_ICLRCommandCallbackHandlerEx *director = dynamic_cast<SwigDirector_ICLRCommandCallbackHandlerEx *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRDataHandlerEx_HandleDataTrans(void * jarg1, void * jarg2) {
  Mcsf::ICLRDataHandlerEx *arg1 = (Mcsf::ICLRDataHandlerEx *) 0 ;
  SwigValueWrapper< boost::shared_ptr< Mcsf::SendDataContextEx > > arg2 ;
  boost::shared_ptr< Mcsf::SendDataContextEx > *argp2 ;
  
  arg1 = (Mcsf::ICLRDataHandlerEx *)jarg1; 
  argp2 = (boost::shared_ptr< Mcsf::SendDataContextEx > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::SendDataContextEx >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HandleDataTrans(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRDataHandlerEx_HandleDataTransSwigExplicitICLRDataHandlerEx(void * jarg1, void * jarg2) {
  Mcsf::ICLRDataHandlerEx *arg1 = (Mcsf::ICLRDataHandlerEx *) 0 ;
  SwigValueWrapper< boost::shared_ptr< Mcsf::SendDataContextEx > > arg2 ;
  boost::shared_ptr< Mcsf::SendDataContextEx > *argp2 ;
  
  arg1 = (Mcsf::ICLRDataHandlerEx *)jarg1; 
  argp2 = (boost::shared_ptr< Mcsf::SendDataContextEx > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::SendDataContextEx >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Mcsf::ICLRDataHandlerEx::HandleDataTrans(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRDataHandlerEx_HandleDataTransCLR(void * jarg1, void * jarg2) {
  Mcsf::ICLRDataHandlerEx *arg1 = (Mcsf::ICLRDataHandlerEx *) 0 ;
  Mcsf::SendDataContextEx *arg2 = (Mcsf::SendDataContextEx *) 0 ;
  
  arg1 = (Mcsf::ICLRDataHandlerEx *)jarg1; 
  arg2 = (Mcsf::SendDataContextEx *)jarg2; 
  (arg1)->HandleDataTransCLR((Mcsf::SendDataContextEx const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICLRDataHandlerEx() {
  void * jresult ;
  Mcsf::ICLRDataHandlerEx *result = 0 ;
  
  result = (Mcsf::ICLRDataHandlerEx *)new SwigDirector_ICLRDataHandlerEx();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICLRDataHandlerEx(void * jarg1) {
  Mcsf::ICLRDataHandlerEx *arg1 = (Mcsf::ICLRDataHandlerEx *) 0 ;
  
  arg1 = (Mcsf::ICLRDataHandlerEx *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICLRDataHandlerEx_director_connect(void *objarg, SwigDirector_ICLRDataHandlerEx::SWIG_Callback0_t callback0, SwigDirector_ICLRDataHandlerEx::SWIG_Callback1_t callback1) {
  Mcsf::ICLRDataHandlerEx *obj = (Mcsf::ICLRDataHandlerEx *)objarg;
  SwigDirector_ICLRDataHandlerEx *director = dynamic_cast<SwigDirector_ICLRDataHandlerEx *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwigSharedCharArrayUtil_Get(void * jarg1) {
  void * jresult ;
  boost::shared_array< char > *arg1 = (boost::shared_array< char > *) 0 ;
  void *result = 0 ;
  
  arg1 = (boost::shared_array< char > *)jarg1; 
  result = (void *)Mcsf::internal::SwigSharedCharArrayUtil::Get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigSharedCharArrayUtil_Reset(void * jarg1, unsigned int jarg2) {
  boost::shared_array< char > *arg1 = (boost::shared_array< char > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (boost::shared_array< char > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  Mcsf::internal::SwigSharedCharArrayUtil::Reset(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigSharedCharArrayUtil_Destroy(void * jarg1) {
  boost::shared_array< char > *arg1 = (boost::shared_array< char > *) 0 ;
  
  arg1 = (boost::shared_array< char > *)jarg1; 
  Mcsf::internal::SwigSharedCharArrayUtil::Destroy(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwigSharedCharArrayUtil_UseCount(void * jarg1) {
  int jresult ;
  boost::shared_array< char > *arg1 = (boost::shared_array< char > *) 0 ;
  int result;
  
  arg1 = (boost::shared_array< char > *)jarg1; 
  result = (int)Mcsf::internal::SwigSharedCharArrayUtil::UseCount(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwigSharedCharArrayUtil_New__SWIG_0(void * jarg1) {
  void * jresult ;
  Mcsf::ICommandHandlerEx *arg1 = (Mcsf::ICommandHandlerEx *) 0 ;
  SwigValueWrapper< boost::shared_ptr< Mcsf::ICommandHandlerEx > > result;
  
  arg1 = (Mcsf::ICommandHandlerEx *)jarg1; 
  result = Mcsf::internal::SwigSharedCharArrayUtil::New(arg1);
  jresult = new boost::shared_ptr< Mcsf::ICommandHandlerEx >((const boost::shared_ptr< Mcsf::ICommandHandlerEx > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigSharedCharArrayUtil_Destory__SWIG_0(void * jarg1) {
  boost::shared_ptr< Mcsf::ICommandHandlerEx > *arg1 = (boost::shared_ptr< Mcsf::ICommandHandlerEx > *) 0 ;
  
  arg1 = (boost::shared_ptr< Mcsf::ICommandHandlerEx > *)jarg1; 
  Mcsf::internal::SwigSharedCharArrayUtil::Destory(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwigSharedCharArrayUtil_New__SWIG_1(void * jarg1) {
  void * jresult ;
  Mcsf::IDataHandlerEx *arg1 = (Mcsf::IDataHandlerEx *) 0 ;
  SwigValueWrapper< boost::shared_ptr< Mcsf::IDataHandlerEx > > result;
  
  arg1 = (Mcsf::IDataHandlerEx *)jarg1; 
  result = Mcsf::internal::SwigSharedCharArrayUtil::New(arg1);
  jresult = new boost::shared_ptr< Mcsf::IDataHandlerEx >((const boost::shared_ptr< Mcsf::IDataHandlerEx > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigSharedCharArrayUtil_Destory__SWIG_1(void * jarg1) {
  boost::shared_ptr< Mcsf::IDataHandlerEx > *arg1 = (boost::shared_ptr< Mcsf::IDataHandlerEx > *) 0 ;
  
  arg1 = (boost::shared_ptr< Mcsf::IDataHandlerEx > *)jarg1; 
  Mcsf::internal::SwigSharedCharArrayUtil::Destory(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwigSharedCharArrayUtil_New__SWIG_2(void * jarg1) {
  void * jresult ;
  Mcsf::ICommandCallbackHandlerEx *arg1 = (Mcsf::ICommandCallbackHandlerEx *) 0 ;
  boost::shared_ptr< Mcsf::ICommandCallbackHandlerEx > result;
  
  arg1 = (Mcsf::ICommandCallbackHandlerEx *)jarg1; 
  result = Mcsf::internal::SwigSharedCharArrayUtil::New(arg1);
  jresult = new boost::shared_ptr< Mcsf::ICommandCallbackHandlerEx >((const boost::shared_ptr< Mcsf::ICommandCallbackHandlerEx > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigSharedCharArrayUtil_Destory__SWIG_2(void * jarg1) {
  boost::shared_ptr< Mcsf::ICommandCallbackHandlerEx > *arg1 = (boost::shared_ptr< Mcsf::ICommandCallbackHandlerEx > *) 0 ;
  
  arg1 = (boost::shared_ptr< Mcsf::ICommandCallbackHandlerEx > *)jarg1; 
  Mcsf::internal::SwigSharedCharArrayUtil::Destory(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SwigSharedCharArrayUtil() {
  void * jresult ;
  Mcsf::internal::SwigSharedCharArrayUtil *result = 0 ;
  
  result = (Mcsf::internal::SwigSharedCharArrayUtil *)new Mcsf::internal::SwigSharedCharArrayUtil();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SwigSharedCharArrayUtil(void * jarg1) {
  Mcsf::internal::SwigSharedCharArrayUtil *arg1 = (Mcsf::internal::SwigSharedCharArrayUtil *) 0 ;
  
  arg1 = (Mcsf::internal::SwigSharedCharArrayUtil *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IEventHandler_HandleEvent(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5) {
  int jresult ;
  Mcsf::IEventHandler *arg1 = (Mcsf::IEventHandler *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  int result;
  
  arg1 = (Mcsf::IEventHandler *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (std::string *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HandleEvent((std::string const &)*arg2,arg3,arg4,(std::string const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IEventHandler(void * jarg1) {
  Mcsf::IEventHandler *arg1 = (Mcsf::IEventHandler *) 0 ;
  
  arg1 = (Mcsf::IEventHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IEventHandler() {
  void * jresult ;
  Mcsf::IEventHandler *result = 0 ;
  
  result = (Mcsf::IEventHandler *)new SwigDirector_IEventHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IEventHandler_director_connect(void *objarg, SwigDirector_IEventHandler::SWIG_Callback0_t callback0) {
  Mcsf::IEventHandler *obj = (Mcsf::IEventHandler *)objarg;
  SwigDirector_IEventHandler *director = dynamic_cast<SwigDirector_IEventHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISyncResult_GetSerializedObject(void * jarg1) {
  void * jresult ;
  Mcsf::ISyncResult *arg1 = (Mcsf::ISyncResult *) 0 ;
  std::string result;
  
  arg1 = (Mcsf::ISyncResult *)jarg1; 
  result = (arg1)->GetSerializedObject();
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISyncResult_SetSerializedObject(void * jarg1, void * jarg2) {
  Mcsf::ISyncResult *arg1 = (Mcsf::ISyncResult *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::ISyncResult *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  (arg1)->SetSerializedObject((std::string const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ISyncResult_GetCallResult(void * jarg1) {
  int jresult ;
  Mcsf::ISyncResult *arg1 = (Mcsf::ISyncResult *) 0 ;
  int result;
  
  arg1 = (Mcsf::ISyncResult *)jarg1; 
  result = (int)(arg1)->GetCallResult();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISyncResult(void * jarg1) {
  Mcsf::ISyncResult *arg1 = (Mcsf::ISyncResult *) 0 ;
  
  arg1 = (Mcsf::ISyncResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICommunicationProxy(void * jarg1) {
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_AsyncSendCommand(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  Mcsf::CommandContext *arg2 = (Mcsf::CommandContext *) 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  arg2 = (Mcsf::CommandContext *)jarg2; 
  result = (int)(arg1)->AsyncSendCommand((Mcsf::CommandContext const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_SyncSendData(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  Mcsf::SendDataContext *arg2 = (Mcsf::SendDataContext *) 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  arg2 = (Mcsf::SendDataContext *)jarg2; 
  result = (int)(arg1)->SyncSendData((Mcsf::SendDataContext const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_SyncSendDataEx(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  Mcsf::SendDataContextEx *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  arg2 = (Mcsf::SendDataContextEx *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Mcsf::SendDataContextEx const & type is null", 0);
    return 0;
  } 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->SyncSendDataEx((Mcsf::SendDataContextEx const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_AsyncSendData(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  Mcsf::SendDataContext *arg2 = (Mcsf::SendDataContext *) 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  arg2 = (Mcsf::SendDataContext *)jarg2; 
  result = (int)(arg1)->AsyncSendData((Mcsf::SendDataContext const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_AsyncSendDataEx(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  Mcsf::SendDataContextEx *arg2 = 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  arg2 = (Mcsf::SendDataContextEx *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Mcsf::SendDataContextEx const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->AsyncSendDataEx((Mcsf::SendDataContextEx const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_RegisterCommandHandler(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  int arg2 ;
  Mcsf::ICommandHandler *arg3 = (Mcsf::ICommandHandler *) 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Mcsf::ICommandHandler *)jarg3; 
  result = (int)(arg1)->RegisterCommandHandler(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_RegisterCommandHandlerEx(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  int arg2 ;
  SwigValueWrapper< boost::shared_ptr< Mcsf::ICommandHandlerEx > > arg3 ;
  boost::shared_ptr< Mcsf::ICommandHandlerEx > *argp3 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (boost::shared_ptr< Mcsf::ICommandHandlerEx > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::ICommandHandlerEx >", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (int)(arg1)->RegisterCommandHandlerEx(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommunicationProxy_UnRegisterCommandHandler(void * jarg1, int jarg2) {
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  int arg2 ;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UnRegisterCommandHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommunicationProxy_UnRegisterAllCommandHandlers(void * jarg1) {
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  (arg1)->UnRegisterAllCommandHandlers();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_RegisterDataHandler(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  Mcsf::IDataHandler *arg2 = (Mcsf::IDataHandler *) 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  arg2 = (Mcsf::IDataHandler *)jarg2; 
  result = (int)(arg1)->RegisterDataHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_RegisterDataHandlerEx(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  SwigValueWrapper< boost::shared_ptr< Mcsf::IDataHandlerEx > > arg2 ;
  boost::shared_ptr< Mcsf::IDataHandlerEx > *argp2 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  argp2 = (boost::shared_ptr< Mcsf::IDataHandlerEx > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::IDataHandlerEx >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->RegisterDataHandlerEx(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommunicationProxy_UnRegisterDataHandler(void * jarg1) {
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  (arg1)->UnRegisterDataHandler();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_SendEvent(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int)(arg1)->SendEvent((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_BroadcastEvent(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int)(arg1)->BroadcastEvent((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_RegisterEventHandler(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  int arg2 ;
  int arg3 ;
  Mcsf::IEventHandler *arg4 = (Mcsf::IEventHandler *) 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Mcsf::IEventHandler *)jarg4; 
  result = (int)(arg1)->RegisterEventHandler(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommunicationProxy_UnRegisterEventHandler(void * jarg1, int jarg2, int jarg3) {
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->UnRegisterEventHandler(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommunicationProxy_UnRegisterAllEventHandlers(void * jarg1) {
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  (arg1)->UnRegisterAllEventHandlers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICommunicationProxy_UnRegisterAllHandlers(void * jarg1) {
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  (arg1)->UnRegisterAllHandlers();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_SyncSendCommand(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  Mcsf::CommandContext *arg2 = (Mcsf::CommandContext *) 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  arg2 = (Mcsf::CommandContext *)jarg2; 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->SyncSendCommand((Mcsf::CommandContext const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_CheckCastName(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->CheckCastName((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ICommunicationProxy_GetName(void * jarg1) {
  char * jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  std::string result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  result = ((Mcsf::ICommunicationProxy const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ICommunicationProxy_GetSystemDispatcherAddress(void * jarg1) {
  char * jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  std::string result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  result = ((Mcsf::ICommunicationProxy const *)arg1)->GetSystemDispatcherAddress();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_SendSystemEvent(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int)(arg1)->SendSystemEvent((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICommunicationProxy_BroadcastSystemEvent(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  int jresult ;
  Mcsf::ICommunicationProxy *arg1 = (Mcsf::ICommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  arg1 = (Mcsf::ICommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int)(arg1)->BroadcastSystemEvent((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommunicationProxy__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  Mcsf::CommunicationProxy *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Mcsf::CommunicationProxy *)new Mcsf::CommunicationProxy(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommunicationProxy__SWIG_1() {
  void * jresult ;
  Mcsf::CommunicationProxy *result = 0 ;
  
  result = (Mcsf::CommunicationProxy *)new Mcsf::CommunicationProxy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommunicationProxy(void * jarg1) {
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_AsyncSendCommand(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  Mcsf::CommandContext *arg2 = (Mcsf::CommandContext *) 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (Mcsf::CommandContext *)jarg2; 
  result = (int)(arg1)->AsyncSendCommand((Mcsf::CommandContext const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_SyncSendCommand__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  Mcsf::CommandContext *arg2 = (Mcsf::CommandContext *) 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (Mcsf::CommandContext *)jarg2; 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->SyncSendCommand((Mcsf::CommandContext const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommunicationProxy_SyncSendCommand__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  Mcsf::CommandContext *arg2 = (Mcsf::CommandContext *) 0 ;
  Mcsf::ISyncResult *result = 0 ;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (Mcsf::CommandContext *)jarg2; 
  result = (Mcsf::ISyncResult *)(arg1)->SyncSendCommand((Mcsf::CommandContext const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_SyncSendData(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  Mcsf::SendDataContext *arg2 = (Mcsf::SendDataContext *) 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (Mcsf::SendDataContext *)jarg2; 
  result = (int)(arg1)->SyncSendData((Mcsf::SendDataContext const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_SyncSendDataEx__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  Mcsf::SendDataContextEx *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (Mcsf::SendDataContextEx *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Mcsf::SendDataContextEx const & type is null", 0);
    return 0;
  } 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->SyncSendDataEx((Mcsf::SendDataContextEx const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommunicationProxy_SyncSendDataEx__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  Mcsf::SendDataContextEx *arg2 = 0 ;
  Mcsf::ISyncResult *result = 0 ;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (Mcsf::SendDataContextEx *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Mcsf::SendDataContextEx const & type is null", 0);
    return 0;
  } 
  result = (Mcsf::ISyncResult *)(arg1)->SyncSendDataEx((Mcsf::SendDataContextEx const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_AsyncSendData(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  Mcsf::SendDataContext *arg2 = (Mcsf::SendDataContext *) 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (Mcsf::SendDataContext *)jarg2; 
  result = (int)(arg1)->AsyncSendData((Mcsf::SendDataContext const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_AsyncSendDataEx(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  Mcsf::SendDataContextEx *arg2 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (Mcsf::SendDataContextEx *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Mcsf::SendDataContextEx const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->AsyncSendDataEx((Mcsf::SendDataContextEx const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_RegisterCommandHandler(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  int arg2 ;
  Mcsf::ICommandHandler *arg3 = (Mcsf::ICommandHandler *) 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Mcsf::ICommandHandler *)jarg3; 
  result = (int)(arg1)->RegisterCommandHandler(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_RegisterCommandHandlerEx(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  int arg2 ;
  SwigValueWrapper< boost::shared_ptr< Mcsf::ICommandHandlerEx > > arg3 ;
  boost::shared_ptr< Mcsf::ICommandHandlerEx > *argp3 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (boost::shared_ptr< Mcsf::ICommandHandlerEx > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::ICommandHandlerEx >", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (int)(arg1)->RegisterCommandHandlerEx(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommunicationProxy_UnRegisterCommandHandler(void * jarg1, int jarg2) {
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  int arg2 ;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UnRegisterCommandHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommunicationProxy_UnRegisterAllCommandHandlers(void * jarg1) {
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  (arg1)->UnRegisterAllCommandHandlers();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_RegisterDataHandler(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  Mcsf::IDataHandler *arg2 = (Mcsf::IDataHandler *) 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (Mcsf::IDataHandler *)jarg2; 
  result = (int)(arg1)->RegisterDataHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_RegisterDataHandlerEx(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  SwigValueWrapper< boost::shared_ptr< Mcsf::IDataHandlerEx > > arg2 ;
  boost::shared_ptr< Mcsf::IDataHandlerEx > *argp2 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  argp2 = (boost::shared_ptr< Mcsf::IDataHandlerEx > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null boost::shared_ptr< Mcsf::IDataHandlerEx >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->RegisterDataHandlerEx(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommunicationProxy_UnRegisterDataHandler(void * jarg1) {
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  (arg1)->UnRegisterDataHandler();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_RegisterEventHandler(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  int arg2 ;
  int arg3 ;
  Mcsf::IEventHandler *arg4 = (Mcsf::IEventHandler *) 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Mcsf::IEventHandler *)jarg4; 
  result = (int)(arg1)->RegisterEventHandler(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommunicationProxy_UnRegisterEventHandler(void * jarg1, int jarg2, int jarg3) {
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->UnRegisterEventHandler(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommunicationProxy_UnRegisterAllEventHandlers(void * jarg1) {
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  (arg1)->UnRegisterAllEventHandlers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommunicationProxy_UnRegisterAllHandlers(void * jarg1) {
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  (arg1)->UnRegisterAllHandlers();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_SendEvent__SWIG_0(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int)(arg1)->SendEvent((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_SendEvent__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (std::string *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->SendEvent((std::string const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_BroadcastEvent(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int)(arg1)->BroadcastEvent((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_SubscribeEvent__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  Mcsf::CommunicationProxy::ChannelIdMap *arg2 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (Mcsf::CommunicationProxy::ChannelIdMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Mcsf::CommunicationProxy::ChannelIdMap const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->SubscribeEvent((Mcsf::CommunicationProxy::ChannelIdMap const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_SubscribeEvent__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->SubscribeEvent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_StartListener(void * jarg1, char * jarg2) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)(arg1)->StartListener((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_CheckCastToSystemDispatcher(void * jarg1, char * jarg2) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)(arg1)->CheckCastToSystemDispatcher((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_CheckCastName(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->CheckCastName((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommunicationProxy_SetName(void * jarg1, char * jarg2) {
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetName((std::string const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommunicationProxy_GetName(void * jarg1) {
  char * jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  result = ((Mcsf::CommunicationProxy const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommunicationProxy_SetSenderChannelId(void * jarg1, int jarg2) {
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  int arg2 ;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSenderChannelId(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_GetSenderChannelId(void * jarg1) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  result = (int)((Mcsf::CommunicationProxy const *)arg1)->GetSenderChannelId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_DispatchEvent__SWIG_0(void * jarg1, char * jarg2, char * jarg3, int jarg4, int jarg5, char * jarg6) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  std::string *arg6 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = (int)(arg1)->DispatchEvent((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,(std::string const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_DispatchEvent__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5, int jarg6, char * jarg7) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  std::string *arg7 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg7_str(jarg7);
  arg7 = &arg7_str; 
  result = (int)(arg1)->DispatchEvent((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6,(std::string const &)*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_CheckCastToRemote(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int)(arg1)->CheckCastToRemote((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommunicationProxy_SetListenAddress(void * jarg1, char * jarg2) {
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetListenAddress((std::string const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommunicationProxy_GetListenAddress(void * jarg1) {
  char * jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  result = ((Mcsf::CommunicationProxy const *)arg1)->GetListenAddress();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommunicationProxy_GetMacAddress(void * jarg1) {
  char * jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  result = ((Mcsf::CommunicationProxy const *)arg1)->GetMacAddress();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommunicationProxy_GetSystemDispatcherAddress(void * jarg1) {
  char * jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  result = ((Mcsf::CommunicationProxy const *)arg1)->GetSystemDispatcherAddress();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_InitNetBase(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  int arg2 ;
  char **arg3 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char **)jarg3; 
  result = (int)(arg1)->InitNetBase(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_SendSystemEvent(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int)(arg1)->SendSystemEvent((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommunicationProxy_BroadcastSystemEvent(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  int jresult ;
  Mcsf::CommunicationProxy *arg1 = (Mcsf::CommunicationProxy *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  arg1 = (Mcsf::CommunicationProxy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int)(arg1)->BroadcastSystemEvent((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommunicationProxyFactory() {
  void * jresult ;
  Mcsf::CommunicationProxyFactory *result = 0 ;
  
  result = (Mcsf::CommunicationProxyFactory *)new Mcsf::CommunicationProxyFactory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommunicationProxyFactory(void * jarg1) {
  Mcsf::CommunicationProxyFactory *arg1 = (Mcsf::CommunicationProxyFactory *) 0 ;
  
  arg1 = (Mcsf::CommunicationProxyFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PackingMessageLogger_CreateLogger(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)Mcsf::PackingMessageLogger::CreateLogger((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PackingMessageLogger_RelaseLogger(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  Mcsf::PackingMessageLogger::RelaseLogger((std::string const &)*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PackingMessageLogger() {
  void * jresult ;
  Mcsf::PackingMessageLogger *result = 0 ;
  
  result = (Mcsf::PackingMessageLogger *)new Mcsf::PackingMessageLogger();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PackingMessageLogger(void * jarg1) {
  Mcsf::PackingMessageLogger *arg1 = (Mcsf::PackingMessageLogger *) 0 ;
  
  arg1 = (Mcsf::PackingMessageLogger *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommunicationNodeName_CreateCommunicationProxyName__SWIG_0(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = Mcsf::CommunicationNodeName::CreateCommunicationProxyName((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommunicationNodeName_CreateCommunicationProxyName__SWIG_1(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = Mcsf::CommunicationNodeName::CreateCommunicationProxyName((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommunicationNodeName_CreateCommunicationProxyName__SWIG_2(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = Mcsf::CommunicationNodeName::CreateCommunicationProxyName((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommunicationNodeName_GetPeerCommunicationProxyName(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = Mcsf::CommunicationNodeName::GetPeerCommunicationProxyName((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommunicationNodeName_ParseCommunicationProxyName(char * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  arg4 = (std::string *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  result = (bool)Mcsf::CommunicationNodeName::ParseCommunicationProxyName((std::string const &)*arg1,*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommunicationNodeName() {
  void * jresult ;
  Mcsf::CommunicationNodeName *result = 0 ;
  
  result = (Mcsf::CommunicationNodeName *)new Mcsf::CommunicationNodeName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommunicationNodeName(void * jarg1) {
  Mcsf::CommunicationNodeName *arg1 = (Mcsf::CommunicationNodeName *) 0 ;
  
  arg1 = (Mcsf::CommunicationNodeName *)jarg1; 
  delete arg1;
}


SWIGEXPORT Mcsf::ICommandHandler * SWIGSTDCALL CSharp_ICLRCommandHandler_SWIGUpcast(Mcsf::ICLRCommandHandler *jarg1) {
    return (Mcsf::ICommandHandler *)jarg1;
}

SWIGEXPORT Mcsf::ICommandHandlerEx * SWIGSTDCALL CSharp_ICLRCommandHandlerEx_SWIGUpcast(Mcsf::ICLRCommandHandlerEx *jarg1) {
    return (Mcsf::ICommandHandlerEx *)jarg1;
}

SWIGEXPORT Mcsf::ICommandCallbackHandlerEx * SWIGSTDCALL CSharp_ICLRCommandCallbackHandlerEx_SWIGUpcast(Mcsf::ICLRCommandCallbackHandlerEx *jarg1) {
    return (Mcsf::ICommandCallbackHandlerEx *)jarg1;
}

SWIGEXPORT Mcsf::IDataHandlerEx * SWIGSTDCALL CSharp_ICLRDataHandlerEx_SWIGUpcast(Mcsf::ICLRDataHandlerEx *jarg1) {
    return (Mcsf::IDataHandlerEx *)jarg1;
}

SWIGEXPORT Mcsf::ICommunicationProxy * SWIGSTDCALL CSharp_CommunicationProxy_SWIGUpcast(Mcsf::CommunicationProxy *jarg1) {
    return (Mcsf::ICommunicationProxy *)jarg1;
}

#ifdef __cplusplus
}
#endif

