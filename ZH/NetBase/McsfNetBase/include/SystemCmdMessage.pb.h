// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemCmdMessage.proto

#ifndef PROTOBUF_SystemCmdMessage_2eproto__INCLUDED
#define PROTOBUF_SystemCmdMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Mcsf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SystemCmdMessage_2eproto();
void protobuf_AssignDesc_SystemCmdMessage_2eproto();
void protobuf_ShutdownFile_SystemCmdMessage_2eproto();

class McsfRegisterContaineeRequest;
class McsfQueryContaineeRequest;
class McsfQueryContaineeResponse;
class McsfSubscribeEventRequest;
class McsfSubscribeEventRequest_EventSource;
class McsfCheckCastToNameRequest;
class McsfCheckCastToNameResponse;
class McsfSendDataRequest;
class McsfSendDataResponse;
class McsfUnRegisterContaineeRequest;

enum McsfSendDataRequest_SendType {
  McsfSendDataRequest_SendType_SHARE_MEMORY = 1,
  McsfSendDataRequest_SendType_SOCKET = 2
};
bool McsfSendDataRequest_SendType_IsValid(int value);
const McsfSendDataRequest_SendType McsfSendDataRequest_SendType_SendType_MIN = McsfSendDataRequest_SendType_SHARE_MEMORY;
const McsfSendDataRequest_SendType McsfSendDataRequest_SendType_SendType_MAX = McsfSendDataRequest_SendType_SOCKET;
const int McsfSendDataRequest_SendType_SendType_ARRAYSIZE = McsfSendDataRequest_SendType_SendType_MAX + 1;

const ::google::protobuf::EnumDescriptor* McsfSendDataRequest_SendType_descriptor();
inline const ::std::string& McsfSendDataRequest_SendType_Name(McsfSendDataRequest_SendType value) {
  return ::google::protobuf::internal::NameOfEnum(
    McsfSendDataRequest_SendType_descriptor(), value);
}
inline bool McsfSendDataRequest_SendType_Parse(
    const ::std::string& name, McsfSendDataRequest_SendType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<McsfSendDataRequest_SendType>(
    McsfSendDataRequest_SendType_descriptor(), name, value);
}
// ===================================================================

class McsfRegisterContaineeRequest : public ::google::protobuf::Message {
 public:
  McsfRegisterContaineeRequest();
  virtual ~McsfRegisterContaineeRequest();
  
  McsfRegisterContaineeRequest(const McsfRegisterContaineeRequest& from);
  
  inline McsfRegisterContaineeRequest& operator=(const McsfRegisterContaineeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const McsfRegisterContaineeRequest& default_instance();
  
  void Swap(McsfRegisterContaineeRequest* other);
  
  // implements Message ----------------------------------------------
  
  McsfRegisterContaineeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const McsfRegisterContaineeRequest& from);
  void MergeFrom(const McsfRegisterContaineeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string ip_addr = 2;
  inline bool has_ip_addr() const;
  inline void clear_ip_addr();
  static const int kIpAddrFieldNumber = 2;
  inline const ::std::string& ip_addr() const;
  inline void set_ip_addr(const ::std::string& value);
  inline void set_ip_addr(const char* value);
  inline void set_ip_addr(const char* value, size_t size);
  inline ::std::string* mutable_ip_addr();
  inline ::std::string* release_ip_addr();
  
  // @@protoc_insertion_point(class_scope:Mcsf.McsfRegisterContaineeRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip_addr();
  inline void clear_has_ip_addr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* ip_addr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SystemCmdMessage_2eproto();
  friend void protobuf_AssignDesc_SystemCmdMessage_2eproto();
  friend void protobuf_ShutdownFile_SystemCmdMessage_2eproto();
  
  void InitAsDefaultInstance();
  static McsfRegisterContaineeRequest* default_instance_;
};
// -------------------------------------------------------------------

class McsfQueryContaineeRequest : public ::google::protobuf::Message {
 public:
  McsfQueryContaineeRequest();
  virtual ~McsfQueryContaineeRequest();
  
  McsfQueryContaineeRequest(const McsfQueryContaineeRequest& from);
  
  inline McsfQueryContaineeRequest& operator=(const McsfQueryContaineeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const McsfQueryContaineeRequest& default_instance();
  
  void Swap(McsfQueryContaineeRequest* other);
  
  // implements Message ----------------------------------------------
  
  McsfQueryContaineeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const McsfQueryContaineeRequest& from);
  void MergeFrom(const McsfQueryContaineeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:Mcsf.McsfQueryContaineeRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_SystemCmdMessage_2eproto();
  friend void protobuf_AssignDesc_SystemCmdMessage_2eproto();
  friend void protobuf_ShutdownFile_SystemCmdMessage_2eproto();
  
  void InitAsDefaultInstance();
  static McsfQueryContaineeRequest* default_instance_;
};
// -------------------------------------------------------------------

class McsfQueryContaineeResponse : public ::google::protobuf::Message {
 public:
  McsfQueryContaineeResponse();
  virtual ~McsfQueryContaineeResponse();
  
  McsfQueryContaineeResponse(const McsfQueryContaineeResponse& from);
  
  inline McsfQueryContaineeResponse& operator=(const McsfQueryContaineeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const McsfQueryContaineeResponse& default_instance();
  
  void Swap(McsfQueryContaineeResponse* other);
  
  // implements Message ----------------------------------------------
  
  McsfQueryContaineeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const McsfQueryContaineeResponse& from);
  void MergeFrom(const McsfQueryContaineeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string ip_addr = 2;
  inline bool has_ip_addr() const;
  inline void clear_ip_addr();
  static const int kIpAddrFieldNumber = 2;
  inline const ::std::string& ip_addr() const;
  inline void set_ip_addr(const ::std::string& value);
  inline void set_ip_addr(const char* value);
  inline void set_ip_addr(const char* value, size_t size);
  inline ::std::string* mutable_ip_addr();
  inline ::std::string* release_ip_addr();
  
  // @@protoc_insertion_point(class_scope:Mcsf.McsfQueryContaineeResponse)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip_addr();
  inline void clear_has_ip_addr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* ip_addr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SystemCmdMessage_2eproto();
  friend void protobuf_AssignDesc_SystemCmdMessage_2eproto();
  friend void protobuf_ShutdownFile_SystemCmdMessage_2eproto();
  
  void InitAsDefaultInstance();
  static McsfQueryContaineeResponse* default_instance_;
};
// -------------------------------------------------------------------

class McsfSubscribeEventRequest_EventSource : public ::google::protobuf::Message {
 public:
  McsfSubscribeEventRequest_EventSource();
  virtual ~McsfSubscribeEventRequest_EventSource();
  
  McsfSubscribeEventRequest_EventSource(const McsfSubscribeEventRequest_EventSource& from);
  
  inline McsfSubscribeEventRequest_EventSource& operator=(const McsfSubscribeEventRequest_EventSource& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const McsfSubscribeEventRequest_EventSource& default_instance();
  
  void Swap(McsfSubscribeEventRequest_EventSource* other);
  
  // implements Message ----------------------------------------------
  
  McsfSubscribeEventRequest_EventSource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const McsfSubscribeEventRequest_EventSource& from);
  void MergeFrom(const McsfSubscribeEventRequest_EventSource& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::int32 channel_id() const;
  inline void set_channel_id(::google::protobuf::int32 value);
  
  // repeated int32 event_ids = 2;
  inline int event_ids_size() const;
  inline void clear_event_ids();
  static const int kEventIdsFieldNumber = 2;
  inline ::google::protobuf::int32 event_ids(int index) const;
  inline void set_event_ids(int index, ::google::protobuf::int32 value);
  inline void add_event_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      event_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_event_ids();
  
  // @@protoc_insertion_point(class_scope:Mcsf.McsfSubscribeEventRequest.EventSource)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > event_ids_;
  ::google::protobuf::int32 channel_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SystemCmdMessage_2eproto();
  friend void protobuf_AssignDesc_SystemCmdMessage_2eproto();
  friend void protobuf_ShutdownFile_SystemCmdMessage_2eproto();
  
  void InitAsDefaultInstance();
  static McsfSubscribeEventRequest_EventSource* default_instance_;
};
// -------------------------------------------------------------------

class McsfSubscribeEventRequest : public ::google::protobuf::Message {
 public:
  McsfSubscribeEventRequest();
  virtual ~McsfSubscribeEventRequest();
  
  McsfSubscribeEventRequest(const McsfSubscribeEventRequest& from);
  
  inline McsfSubscribeEventRequest& operator=(const McsfSubscribeEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const McsfSubscribeEventRequest& default_instance();
  
  void Swap(McsfSubscribeEventRequest* other);
  
  // implements Message ----------------------------------------------
  
  McsfSubscribeEventRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const McsfSubscribeEventRequest& from);
  void MergeFrom(const McsfSubscribeEventRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef McsfSubscribeEventRequest_EventSource EventSource;
  
  // accessors -------------------------------------------------------
  
  // required string subscriber = 1;
  inline bool has_subscriber() const;
  inline void clear_subscriber();
  static const int kSubscriberFieldNumber = 1;
  inline const ::std::string& subscriber() const;
  inline void set_subscriber(const ::std::string& value);
  inline void set_subscriber(const char* value);
  inline void set_subscriber(const char* value, size_t size);
  inline ::std::string* mutable_subscriber();
  inline ::std::string* release_subscriber();
  
  // repeated .Mcsf.McsfSubscribeEventRequest.EventSource event_marks = 2;
  inline int event_marks_size() const;
  inline void clear_event_marks();
  static const int kEventMarksFieldNumber = 2;
  inline const ::Mcsf::McsfSubscribeEventRequest_EventSource& event_marks(int index) const;
  inline ::Mcsf::McsfSubscribeEventRequest_EventSource* mutable_event_marks(int index);
  inline ::Mcsf::McsfSubscribeEventRequest_EventSource* add_event_marks();
  inline const ::google::protobuf::RepeatedPtrField< ::Mcsf::McsfSubscribeEventRequest_EventSource >&
      event_marks() const;
  inline ::google::protobuf::RepeatedPtrField< ::Mcsf::McsfSubscribeEventRequest_EventSource >*
      mutable_event_marks();
  
  // @@protoc_insertion_point(class_scope:Mcsf.McsfSubscribeEventRequest)
 private:
  inline void set_has_subscriber();
  inline void clear_has_subscriber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* subscriber_;
  ::google::protobuf::RepeatedPtrField< ::Mcsf::McsfSubscribeEventRequest_EventSource > event_marks_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SystemCmdMessage_2eproto();
  friend void protobuf_AssignDesc_SystemCmdMessage_2eproto();
  friend void protobuf_ShutdownFile_SystemCmdMessage_2eproto();
  
  void InitAsDefaultInstance();
  static McsfSubscribeEventRequest* default_instance_;
};
// -------------------------------------------------------------------

class McsfCheckCastToNameRequest : public ::google::protobuf::Message {
 public:
  McsfCheckCastToNameRequest();
  virtual ~McsfCheckCastToNameRequest();
  
  McsfCheckCastToNameRequest(const McsfCheckCastToNameRequest& from);
  
  inline McsfCheckCastToNameRequest& operator=(const McsfCheckCastToNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const McsfCheckCastToNameRequest& default_instance();
  
  void Swap(McsfCheckCastToNameRequest* other);
  
  // implements Message ----------------------------------------------
  
  McsfCheckCastToNameRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const McsfCheckCastToNameRequest& from);
  void MergeFrom(const McsfCheckCastToNameRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 timeout = 2;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Mcsf.McsfCheckCastToNameRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 timeout_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SystemCmdMessage_2eproto();
  friend void protobuf_AssignDesc_SystemCmdMessage_2eproto();
  friend void protobuf_ShutdownFile_SystemCmdMessage_2eproto();
  
  void InitAsDefaultInstance();
  static McsfCheckCastToNameRequest* default_instance_;
};
// -------------------------------------------------------------------

class McsfCheckCastToNameResponse : public ::google::protobuf::Message {
 public:
  McsfCheckCastToNameResponse();
  virtual ~McsfCheckCastToNameResponse();
  
  McsfCheckCastToNameResponse(const McsfCheckCastToNameResponse& from);
  
  inline McsfCheckCastToNameResponse& operator=(const McsfCheckCastToNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const McsfCheckCastToNameResponse& default_instance();
  
  void Swap(McsfCheckCastToNameResponse* other);
  
  // implements Message ----------------------------------------------
  
  McsfCheckCastToNameResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const McsfCheckCastToNameResponse& from);
  void MergeFrom(const McsfCheckCastToNameResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // required string ip_addr = 2;
  inline bool has_ip_addr() const;
  inline void clear_ip_addr();
  static const int kIpAddrFieldNumber = 2;
  inline const ::std::string& ip_addr() const;
  inline void set_ip_addr(const ::std::string& value);
  inline void set_ip_addr(const char* value);
  inline void set_ip_addr(const char* value, size_t size);
  inline ::std::string* mutable_ip_addr();
  inline ::std::string* release_ip_addr();
  
  // @@protoc_insertion_point(class_scope:Mcsf.McsfCheckCastToNameResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ip_addr();
  inline void clear_has_ip_addr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_addr_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SystemCmdMessage_2eproto();
  friend void protobuf_AssignDesc_SystemCmdMessage_2eproto();
  friend void protobuf_ShutdownFile_SystemCmdMessage_2eproto();
  
  void InitAsDefaultInstance();
  static McsfCheckCastToNameResponse* default_instance_;
};
// -------------------------------------------------------------------

class McsfSendDataRequest : public ::google::protobuf::Message {
 public:
  McsfSendDataRequest();
  virtual ~McsfSendDataRequest();
  
  McsfSendDataRequest(const McsfSendDataRequest& from);
  
  inline McsfSendDataRequest& operator=(const McsfSendDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const McsfSendDataRequest& default_instance();
  
  void Swap(McsfSendDataRequest* other);
  
  // implements Message ----------------------------------------------
  
  McsfSendDataRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const McsfSendDataRequest& from);
  void MergeFrom(const McsfSendDataRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef McsfSendDataRequest_SendType SendType;
  static const SendType SHARE_MEMORY = McsfSendDataRequest_SendType_SHARE_MEMORY;
  static const SendType SOCKET = McsfSendDataRequest_SendType_SOCKET;
  static inline bool SendType_IsValid(int value) {
    return McsfSendDataRequest_SendType_IsValid(value);
  }
  static const SendType SendType_MIN =
    McsfSendDataRequest_SendType_SendType_MIN;
  static const SendType SendType_MAX =
    McsfSendDataRequest_SendType_SendType_MAX;
  static const int SendType_ARRAYSIZE =
    McsfSendDataRequest_SendType_SendType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SendType_descriptor() {
    return McsfSendDataRequest_SendType_descriptor();
  }
  static inline const ::std::string& SendType_Name(SendType value) {
    return McsfSendDataRequest_SendType_Name(value);
  }
  static inline bool SendType_Parse(const ::std::string& name,
      SendType* value) {
    return McsfSendDataRequest_SendType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required .Mcsf.McsfSendDataRequest.SendType type = 2 [default = SHARE_MEMORY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Mcsf::McsfSendDataRequest_SendType type() const;
  inline void set_type(::Mcsf::McsfSendDataRequest_SendType value);
  
  // required bytes content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // required bool is_sync = 4 [default = false];
  inline bool has_is_sync() const;
  inline void clear_is_sync();
  static const int kIsSyncFieldNumber = 4;
  inline bool is_sync() const;
  inline void set_is_sync(bool value);
  
  // @@protoc_insertion_point(class_scope:Mcsf.McsfSendDataRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_is_sync();
  inline void clear_has_is_sync();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* content_;
  int type_;
  bool is_sync_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_SystemCmdMessage_2eproto();
  friend void protobuf_AssignDesc_SystemCmdMessage_2eproto();
  friend void protobuf_ShutdownFile_SystemCmdMessage_2eproto();
  
  void InitAsDefaultInstance();
  static McsfSendDataRequest* default_instance_;
};
// -------------------------------------------------------------------

class McsfSendDataResponse : public ::google::protobuf::Message {
 public:
  McsfSendDataResponse();
  virtual ~McsfSendDataResponse();
  
  McsfSendDataResponse(const McsfSendDataResponse& from);
  
  inline McsfSendDataResponse& operator=(const McsfSendDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const McsfSendDataResponse& default_instance();
  
  void Swap(McsfSendDataResponse* other);
  
  // implements Message ----------------------------------------------
  
  McsfSendDataResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const McsfSendDataResponse& from);
  void MergeFrom(const McsfSendDataResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool is_success = 1;
  inline bool has_is_success() const;
  inline void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  inline bool is_success() const;
  inline void set_is_success(bool value);
  
  // optional bytes contents = 2;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 2;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  
  // @@protoc_insertion_point(class_scope:Mcsf.McsfSendDataResponse)
 private:
  inline void set_has_is_success();
  inline void clear_has_is_success();
  inline void set_has_contents();
  inline void clear_has_contents();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* contents_;
  bool is_success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SystemCmdMessage_2eproto();
  friend void protobuf_AssignDesc_SystemCmdMessage_2eproto();
  friend void protobuf_ShutdownFile_SystemCmdMessage_2eproto();
  
  void InitAsDefaultInstance();
  static McsfSendDataResponse* default_instance_;
};
// -------------------------------------------------------------------

class McsfUnRegisterContaineeRequest : public ::google::protobuf::Message {
 public:
  McsfUnRegisterContaineeRequest();
  virtual ~McsfUnRegisterContaineeRequest();
  
  McsfUnRegisterContaineeRequest(const McsfUnRegisterContaineeRequest& from);
  
  inline McsfUnRegisterContaineeRequest& operator=(const McsfUnRegisterContaineeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const McsfUnRegisterContaineeRequest& default_instance();
  
  void Swap(McsfUnRegisterContaineeRequest* other);
  
  // implements Message ----------------------------------------------
  
  McsfUnRegisterContaineeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const McsfUnRegisterContaineeRequest& from);
  void MergeFrom(const McsfUnRegisterContaineeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:Mcsf.McsfUnRegisterContaineeRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_SystemCmdMessage_2eproto();
  friend void protobuf_AssignDesc_SystemCmdMessage_2eproto();
  friend void protobuf_ShutdownFile_SystemCmdMessage_2eproto();
  
  void InitAsDefaultInstance();
  static McsfUnRegisterContaineeRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// McsfRegisterContaineeRequest

// required string name = 1;
inline bool McsfRegisterContaineeRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void McsfRegisterContaineeRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void McsfRegisterContaineeRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void McsfRegisterContaineeRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& McsfRegisterContaineeRequest::name() const {
  return *name_;
}
inline void McsfRegisterContaineeRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void McsfRegisterContaineeRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void McsfRegisterContaineeRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* McsfRegisterContaineeRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* McsfRegisterContaineeRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string ip_addr = 2;
inline bool McsfRegisterContaineeRequest::has_ip_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void McsfRegisterContaineeRequest::set_has_ip_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void McsfRegisterContaineeRequest::clear_has_ip_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void McsfRegisterContaineeRequest::clear_ip_addr() {
  if (ip_addr_ != &::google::protobuf::internal::kEmptyString) {
    ip_addr_->clear();
  }
  clear_has_ip_addr();
}
inline const ::std::string& McsfRegisterContaineeRequest::ip_addr() const {
  return *ip_addr_;
}
inline void McsfRegisterContaineeRequest::set_ip_addr(const ::std::string& value) {
  set_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    ip_addr_ = new ::std::string;
  }
  ip_addr_->assign(value);
}
inline void McsfRegisterContaineeRequest::set_ip_addr(const char* value) {
  set_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    ip_addr_ = new ::std::string;
  }
  ip_addr_->assign(value);
}
inline void McsfRegisterContaineeRequest::set_ip_addr(const char* value, size_t size) {
  set_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    ip_addr_ = new ::std::string;
  }
  ip_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* McsfRegisterContaineeRequest::mutable_ip_addr() {
  set_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    ip_addr_ = new ::std::string;
  }
  return ip_addr_;
}
inline ::std::string* McsfRegisterContaineeRequest::release_ip_addr() {
  clear_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_addr_;
    ip_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// McsfQueryContaineeRequest

// required string name = 1;
inline bool McsfQueryContaineeRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void McsfQueryContaineeRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void McsfQueryContaineeRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void McsfQueryContaineeRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& McsfQueryContaineeRequest::name() const {
  return *name_;
}
inline void McsfQueryContaineeRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void McsfQueryContaineeRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void McsfQueryContaineeRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* McsfQueryContaineeRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* McsfQueryContaineeRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// McsfQueryContaineeResponse

// required string name = 1;
inline bool McsfQueryContaineeResponse::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void McsfQueryContaineeResponse::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void McsfQueryContaineeResponse::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void McsfQueryContaineeResponse::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& McsfQueryContaineeResponse::name() const {
  return *name_;
}
inline void McsfQueryContaineeResponse::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void McsfQueryContaineeResponse::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void McsfQueryContaineeResponse::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* McsfQueryContaineeResponse::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* McsfQueryContaineeResponse::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string ip_addr = 2;
inline bool McsfQueryContaineeResponse::has_ip_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void McsfQueryContaineeResponse::set_has_ip_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void McsfQueryContaineeResponse::clear_has_ip_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void McsfQueryContaineeResponse::clear_ip_addr() {
  if (ip_addr_ != &::google::protobuf::internal::kEmptyString) {
    ip_addr_->clear();
  }
  clear_has_ip_addr();
}
inline const ::std::string& McsfQueryContaineeResponse::ip_addr() const {
  return *ip_addr_;
}
inline void McsfQueryContaineeResponse::set_ip_addr(const ::std::string& value) {
  set_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    ip_addr_ = new ::std::string;
  }
  ip_addr_->assign(value);
}
inline void McsfQueryContaineeResponse::set_ip_addr(const char* value) {
  set_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    ip_addr_ = new ::std::string;
  }
  ip_addr_->assign(value);
}
inline void McsfQueryContaineeResponse::set_ip_addr(const char* value, size_t size) {
  set_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    ip_addr_ = new ::std::string;
  }
  ip_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* McsfQueryContaineeResponse::mutable_ip_addr() {
  set_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    ip_addr_ = new ::std::string;
  }
  return ip_addr_;
}
inline ::std::string* McsfQueryContaineeResponse::release_ip_addr() {
  clear_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_addr_;
    ip_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// McsfSubscribeEventRequest_EventSource

// required int32 channel_id = 1;
inline bool McsfSubscribeEventRequest_EventSource::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void McsfSubscribeEventRequest_EventSource::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void McsfSubscribeEventRequest_EventSource::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void McsfSubscribeEventRequest_EventSource::clear_channel_id() {
  channel_id_ = 0;
  clear_has_channel_id();
}
inline ::google::protobuf::int32 McsfSubscribeEventRequest_EventSource::channel_id() const {
  return channel_id_;
}
inline void McsfSubscribeEventRequest_EventSource::set_channel_id(::google::protobuf::int32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// repeated int32 event_ids = 2;
inline int McsfSubscribeEventRequest_EventSource::event_ids_size() const {
  return event_ids_.size();
}
inline void McsfSubscribeEventRequest_EventSource::clear_event_ids() {
  event_ids_.Clear();
}
inline ::google::protobuf::int32 McsfSubscribeEventRequest_EventSource::event_ids(int index) const {
  return event_ids_.Get(index);
}
inline void McsfSubscribeEventRequest_EventSource::set_event_ids(int index, ::google::protobuf::int32 value) {
  event_ids_.Set(index, value);
}
inline void McsfSubscribeEventRequest_EventSource::add_event_ids(::google::protobuf::int32 value) {
  event_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
McsfSubscribeEventRequest_EventSource::event_ids() const {
  return event_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
McsfSubscribeEventRequest_EventSource::mutable_event_ids() {
  return &event_ids_;
}

// -------------------------------------------------------------------

// McsfSubscribeEventRequest

// required string subscriber = 1;
inline bool McsfSubscribeEventRequest::has_subscriber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void McsfSubscribeEventRequest::set_has_subscriber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void McsfSubscribeEventRequest::clear_has_subscriber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void McsfSubscribeEventRequest::clear_subscriber() {
  if (subscriber_ != &::google::protobuf::internal::kEmptyString) {
    subscriber_->clear();
  }
  clear_has_subscriber();
}
inline const ::std::string& McsfSubscribeEventRequest::subscriber() const {
  return *subscriber_;
}
inline void McsfSubscribeEventRequest::set_subscriber(const ::std::string& value) {
  set_has_subscriber();
  if (subscriber_ == &::google::protobuf::internal::kEmptyString) {
    subscriber_ = new ::std::string;
  }
  subscriber_->assign(value);
}
inline void McsfSubscribeEventRequest::set_subscriber(const char* value) {
  set_has_subscriber();
  if (subscriber_ == &::google::protobuf::internal::kEmptyString) {
    subscriber_ = new ::std::string;
  }
  subscriber_->assign(value);
}
inline void McsfSubscribeEventRequest::set_subscriber(const char* value, size_t size) {
  set_has_subscriber();
  if (subscriber_ == &::google::protobuf::internal::kEmptyString) {
    subscriber_ = new ::std::string;
  }
  subscriber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* McsfSubscribeEventRequest::mutable_subscriber() {
  set_has_subscriber();
  if (subscriber_ == &::google::protobuf::internal::kEmptyString) {
    subscriber_ = new ::std::string;
  }
  return subscriber_;
}
inline ::std::string* McsfSubscribeEventRequest::release_subscriber() {
  clear_has_subscriber();
  if (subscriber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subscriber_;
    subscriber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Mcsf.McsfSubscribeEventRequest.EventSource event_marks = 2;
inline int McsfSubscribeEventRequest::event_marks_size() const {
  return event_marks_.size();
}
inline void McsfSubscribeEventRequest::clear_event_marks() {
  event_marks_.Clear();
}
inline const ::Mcsf::McsfSubscribeEventRequest_EventSource& McsfSubscribeEventRequest::event_marks(int index) const {
  return event_marks_.Get(index);
}
inline ::Mcsf::McsfSubscribeEventRequest_EventSource* McsfSubscribeEventRequest::mutable_event_marks(int index) {
  return event_marks_.Mutable(index);
}
inline ::Mcsf::McsfSubscribeEventRequest_EventSource* McsfSubscribeEventRequest::add_event_marks() {
  return event_marks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Mcsf::McsfSubscribeEventRequest_EventSource >&
McsfSubscribeEventRequest::event_marks() const {
  return event_marks_;
}
inline ::google::protobuf::RepeatedPtrField< ::Mcsf::McsfSubscribeEventRequest_EventSource >*
McsfSubscribeEventRequest::mutable_event_marks() {
  return &event_marks_;
}

// -------------------------------------------------------------------

// McsfCheckCastToNameRequest

// required string name = 1;
inline bool McsfCheckCastToNameRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void McsfCheckCastToNameRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void McsfCheckCastToNameRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void McsfCheckCastToNameRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& McsfCheckCastToNameRequest::name() const {
  return *name_;
}
inline void McsfCheckCastToNameRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void McsfCheckCastToNameRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void McsfCheckCastToNameRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* McsfCheckCastToNameRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* McsfCheckCastToNameRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 timeout = 2;
inline bool McsfCheckCastToNameRequest::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void McsfCheckCastToNameRequest::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void McsfCheckCastToNameRequest::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void McsfCheckCastToNameRequest::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::google::protobuf::int32 McsfCheckCastToNameRequest::timeout() const {
  return timeout_;
}
inline void McsfCheckCastToNameRequest::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
}

// -------------------------------------------------------------------

// McsfCheckCastToNameResponse

// required int32 result = 1;
inline bool McsfCheckCastToNameResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void McsfCheckCastToNameResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void McsfCheckCastToNameResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void McsfCheckCastToNameResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 McsfCheckCastToNameResponse::result() const {
  return result_;
}
inline void McsfCheckCastToNameResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string ip_addr = 2;
inline bool McsfCheckCastToNameResponse::has_ip_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void McsfCheckCastToNameResponse::set_has_ip_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void McsfCheckCastToNameResponse::clear_has_ip_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void McsfCheckCastToNameResponse::clear_ip_addr() {
  if (ip_addr_ != &::google::protobuf::internal::kEmptyString) {
    ip_addr_->clear();
  }
  clear_has_ip_addr();
}
inline const ::std::string& McsfCheckCastToNameResponse::ip_addr() const {
  return *ip_addr_;
}
inline void McsfCheckCastToNameResponse::set_ip_addr(const ::std::string& value) {
  set_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    ip_addr_ = new ::std::string;
  }
  ip_addr_->assign(value);
}
inline void McsfCheckCastToNameResponse::set_ip_addr(const char* value) {
  set_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    ip_addr_ = new ::std::string;
  }
  ip_addr_->assign(value);
}
inline void McsfCheckCastToNameResponse::set_ip_addr(const char* value, size_t size) {
  set_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    ip_addr_ = new ::std::string;
  }
  ip_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* McsfCheckCastToNameResponse::mutable_ip_addr() {
  set_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    ip_addr_ = new ::std::string;
  }
  return ip_addr_;
}
inline ::std::string* McsfCheckCastToNameResponse::release_ip_addr() {
  clear_has_ip_addr();
  if (ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_addr_;
    ip_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// McsfSendDataRequest

// required string name = 1;
inline bool McsfSendDataRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void McsfSendDataRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void McsfSendDataRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void McsfSendDataRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& McsfSendDataRequest::name() const {
  return *name_;
}
inline void McsfSendDataRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void McsfSendDataRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void McsfSendDataRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* McsfSendDataRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* McsfSendDataRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .Mcsf.McsfSendDataRequest.SendType type = 2 [default = SHARE_MEMORY];
inline bool McsfSendDataRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void McsfSendDataRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void McsfSendDataRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void McsfSendDataRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Mcsf::McsfSendDataRequest_SendType McsfSendDataRequest::type() const {
  return static_cast< ::Mcsf::McsfSendDataRequest_SendType >(type_);
}
inline void McsfSendDataRequest::set_type(::Mcsf::McsfSendDataRequest_SendType value) {
  GOOGLE_DCHECK(::Mcsf::McsfSendDataRequest_SendType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required bytes content = 3;
inline bool McsfSendDataRequest::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void McsfSendDataRequest::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void McsfSendDataRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void McsfSendDataRequest::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& McsfSendDataRequest::content() const {
  return *content_;
}
inline void McsfSendDataRequest::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void McsfSendDataRequest::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void McsfSendDataRequest::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* McsfSendDataRequest::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* McsfSendDataRequest::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool is_sync = 4 [default = false];
inline bool McsfSendDataRequest::has_is_sync() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void McsfSendDataRequest::set_has_is_sync() {
  _has_bits_[0] |= 0x00000008u;
}
inline void McsfSendDataRequest::clear_has_is_sync() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void McsfSendDataRequest::clear_is_sync() {
  is_sync_ = false;
  clear_has_is_sync();
}
inline bool McsfSendDataRequest::is_sync() const {
  return is_sync_;
}
inline void McsfSendDataRequest::set_is_sync(bool value) {
  set_has_is_sync();
  is_sync_ = value;
}

// -------------------------------------------------------------------

// McsfSendDataResponse

// required bool is_success = 1;
inline bool McsfSendDataResponse::has_is_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void McsfSendDataResponse::set_has_is_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void McsfSendDataResponse::clear_has_is_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void McsfSendDataResponse::clear_is_success() {
  is_success_ = false;
  clear_has_is_success();
}
inline bool McsfSendDataResponse::is_success() const {
  return is_success_;
}
inline void McsfSendDataResponse::set_is_success(bool value) {
  set_has_is_success();
  is_success_ = value;
}

// optional bytes contents = 2;
inline bool McsfSendDataResponse::has_contents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void McsfSendDataResponse::set_has_contents() {
  _has_bits_[0] |= 0x00000002u;
}
inline void McsfSendDataResponse::clear_has_contents() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void McsfSendDataResponse::clear_contents() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& McsfSendDataResponse::contents() const {
  return *contents_;
}
inline void McsfSendDataResponse::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void McsfSendDataResponse::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void McsfSendDataResponse::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* McsfSendDataResponse::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* McsfSendDataResponse::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// McsfUnRegisterContaineeRequest

// required string name = 1;
inline bool McsfUnRegisterContaineeRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void McsfUnRegisterContaineeRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void McsfUnRegisterContaineeRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void McsfUnRegisterContaineeRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& McsfUnRegisterContaineeRequest::name() const {
  return *name_;
}
inline void McsfUnRegisterContaineeRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void McsfUnRegisterContaineeRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void McsfUnRegisterContaineeRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* McsfUnRegisterContaineeRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* McsfUnRegisterContaineeRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Mcsf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Mcsf::McsfSendDataRequest_SendType>() {
  return ::Mcsf::McsfSendDataRequest_SendType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SystemCmdMessage_2eproto__INCLUDED
