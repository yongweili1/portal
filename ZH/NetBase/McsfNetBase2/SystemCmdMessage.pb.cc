// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SystemCmdMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mcsf {

namespace {

const ::google::protobuf::Descriptor* McsfRegisterContaineeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  McsfRegisterContaineeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* McsfQueryContaineeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  McsfQueryContaineeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* McsfQueryContaineeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  McsfQueryContaineeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* McsfSubscribeEventRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  McsfSubscribeEventRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* McsfSubscribeEventRequest_EventSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  McsfSubscribeEventRequest_EventSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* McsfCheckCastToNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  McsfCheckCastToNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* McsfCheckCastToNameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  McsfCheckCastToNameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* McsfSendDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  McsfSendDataRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* McsfSendDataRequest_SendType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* McsfSendDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  McsfSendDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* McsfUnRegisterContaineeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  McsfUnRegisterContaineeRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SystemCmdMessage_2eproto() {
  protobuf_AddDesc_SystemCmdMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SystemCmdMessage.proto");
  GOOGLE_CHECK(file != NULL);
  McsfRegisterContaineeRequest_descriptor_ = file->message_type(0);
  static const int McsfRegisterContaineeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfRegisterContaineeRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfRegisterContaineeRequest, ip_addr_),
  };
  McsfRegisterContaineeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      McsfRegisterContaineeRequest_descriptor_,
      McsfRegisterContaineeRequest::default_instance_,
      McsfRegisterContaineeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfRegisterContaineeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfRegisterContaineeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(McsfRegisterContaineeRequest));
  McsfQueryContaineeRequest_descriptor_ = file->message_type(1);
  static const int McsfQueryContaineeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfQueryContaineeRequest, name_),
  };
  McsfQueryContaineeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      McsfQueryContaineeRequest_descriptor_,
      McsfQueryContaineeRequest::default_instance_,
      McsfQueryContaineeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfQueryContaineeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfQueryContaineeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(McsfQueryContaineeRequest));
  McsfQueryContaineeResponse_descriptor_ = file->message_type(2);
  static const int McsfQueryContaineeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfQueryContaineeResponse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfQueryContaineeResponse, ip_addr_),
  };
  McsfQueryContaineeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      McsfQueryContaineeResponse_descriptor_,
      McsfQueryContaineeResponse::default_instance_,
      McsfQueryContaineeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfQueryContaineeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfQueryContaineeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(McsfQueryContaineeResponse));
  McsfSubscribeEventRequest_descriptor_ = file->message_type(3);
  static const int McsfSubscribeEventRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSubscribeEventRequest, subscriber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSubscribeEventRequest, event_marks_),
  };
  McsfSubscribeEventRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      McsfSubscribeEventRequest_descriptor_,
      McsfSubscribeEventRequest::default_instance_,
      McsfSubscribeEventRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSubscribeEventRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSubscribeEventRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(McsfSubscribeEventRequest));
  McsfSubscribeEventRequest_EventSource_descriptor_ = McsfSubscribeEventRequest_descriptor_->nested_type(0);
  static const int McsfSubscribeEventRequest_EventSource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSubscribeEventRequest_EventSource, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSubscribeEventRequest_EventSource, event_ids_),
  };
  McsfSubscribeEventRequest_EventSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      McsfSubscribeEventRequest_EventSource_descriptor_,
      McsfSubscribeEventRequest_EventSource::default_instance_,
      McsfSubscribeEventRequest_EventSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSubscribeEventRequest_EventSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSubscribeEventRequest_EventSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(McsfSubscribeEventRequest_EventSource));
  McsfCheckCastToNameRequest_descriptor_ = file->message_type(4);
  static const int McsfCheckCastToNameRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfCheckCastToNameRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfCheckCastToNameRequest, timeout_),
  };
  McsfCheckCastToNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      McsfCheckCastToNameRequest_descriptor_,
      McsfCheckCastToNameRequest::default_instance_,
      McsfCheckCastToNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfCheckCastToNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfCheckCastToNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(McsfCheckCastToNameRequest));
  McsfCheckCastToNameResponse_descriptor_ = file->message_type(5);
  static const int McsfCheckCastToNameResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfCheckCastToNameResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfCheckCastToNameResponse, ip_addr_),
  };
  McsfCheckCastToNameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      McsfCheckCastToNameResponse_descriptor_,
      McsfCheckCastToNameResponse::default_instance_,
      McsfCheckCastToNameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfCheckCastToNameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfCheckCastToNameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(McsfCheckCastToNameResponse));
  McsfSendDataRequest_descriptor_ = file->message_type(6);
  static const int McsfSendDataRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSendDataRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSendDataRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSendDataRequest, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSendDataRequest, is_sync_),
  };
  McsfSendDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      McsfSendDataRequest_descriptor_,
      McsfSendDataRequest::default_instance_,
      McsfSendDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSendDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSendDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(McsfSendDataRequest));
  McsfSendDataRequest_SendType_descriptor_ = McsfSendDataRequest_descriptor_->enum_type(0);
  McsfSendDataResponse_descriptor_ = file->message_type(7);
  static const int McsfSendDataResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSendDataResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSendDataResponse, contents_),
  };
  McsfSendDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      McsfSendDataResponse_descriptor_,
      McsfSendDataResponse::default_instance_,
      McsfSendDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSendDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfSendDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(McsfSendDataResponse));
  McsfUnRegisterContaineeRequest_descriptor_ = file->message_type(8);
  static const int McsfUnRegisterContaineeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfUnRegisterContaineeRequest, name_),
  };
  McsfUnRegisterContaineeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      McsfUnRegisterContaineeRequest_descriptor_,
      McsfUnRegisterContaineeRequest::default_instance_,
      McsfUnRegisterContaineeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfUnRegisterContaineeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McsfUnRegisterContaineeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(McsfUnRegisterContaineeRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SystemCmdMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    McsfRegisterContaineeRequest_descriptor_, &McsfRegisterContaineeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    McsfQueryContaineeRequest_descriptor_, &McsfQueryContaineeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    McsfQueryContaineeResponse_descriptor_, &McsfQueryContaineeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    McsfSubscribeEventRequest_descriptor_, &McsfSubscribeEventRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    McsfSubscribeEventRequest_EventSource_descriptor_, &McsfSubscribeEventRequest_EventSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    McsfCheckCastToNameRequest_descriptor_, &McsfCheckCastToNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    McsfCheckCastToNameResponse_descriptor_, &McsfCheckCastToNameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    McsfSendDataRequest_descriptor_, &McsfSendDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    McsfSendDataResponse_descriptor_, &McsfSendDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    McsfUnRegisterContaineeRequest_descriptor_, &McsfUnRegisterContaineeRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SystemCmdMessage_2eproto() {
  delete McsfRegisterContaineeRequest::default_instance_;
  delete McsfRegisterContaineeRequest_reflection_;
  delete McsfQueryContaineeRequest::default_instance_;
  delete McsfQueryContaineeRequest_reflection_;
  delete McsfQueryContaineeResponse::default_instance_;
  delete McsfQueryContaineeResponse_reflection_;
  delete McsfSubscribeEventRequest::default_instance_;
  delete McsfSubscribeEventRequest_reflection_;
  delete McsfSubscribeEventRequest_EventSource::default_instance_;
  delete McsfSubscribeEventRequest_EventSource_reflection_;
  delete McsfCheckCastToNameRequest::default_instance_;
  delete McsfCheckCastToNameRequest_reflection_;
  delete McsfCheckCastToNameResponse::default_instance_;
  delete McsfCheckCastToNameResponse_reflection_;
  delete McsfSendDataRequest::default_instance_;
  delete McsfSendDataRequest_reflection_;
  delete McsfSendDataResponse::default_instance_;
  delete McsfSendDataResponse_reflection_;
  delete McsfUnRegisterContaineeRequest::default_instance_;
  delete McsfUnRegisterContaineeRequest_reflection_;
}

void protobuf_AddDesc_SystemCmdMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026SystemCmdMessage.proto\022\004Mcsf\"=\n\034McsfRe"
    "gisterContaineeRequest\022\014\n\004name\030\001 \002(\t\022\017\n\007"
    "ip_addr\030\002 \002(\t\")\n\031McsfQueryContaineeReque"
    "st\022\014\n\004name\030\001 \002(\t\";\n\032McsfQueryContaineeRe"
    "sponse\022\014\n\004name\030\001 \002(\t\022\017\n\007ip_addr\030\002 \002(\t\"\247\001"
    "\n\031McsfSubscribeEventRequest\022\022\n\nsubscribe"
    "r\030\001 \002(\t\022@\n\013event_marks\030\002 \003(\0132+.Mcsf.Mcsf"
    "SubscribeEventRequest.EventSource\0324\n\013Eve"
    "ntSource\022\022\n\nchannel_id\030\001 \002(\005\022\021\n\tevent_id"
    "s\030\002 \003(\005\";\n\032McsfCheckCastToNameRequest\022\014\n"
    "\004name\030\001 \002(\t\022\017\n\007timeout\030\002 \002(\005\">\n\033McsfChec"
    "kCastToNameResponse\022\016\n\006result\030\001 \002(\005\022\017\n\007i"
    "p_addr\030\002 \002(\t\"\266\001\n\023McsfSendDataRequest\022\014\n\004"
    "name\030\001 \002(\t\022>\n\004type\030\002 \002(\0162\".Mcsf.McsfSend"
    "DataRequest.SendType:\014SHARE_MEMORY\022\017\n\007co"
    "ntent\030\003 \002(\014\022\026\n\007is_sync\030\004 \002(\010:\005false\"(\n\010S"
    "endType\022\020\n\014SHARE_MEMORY\020\001\022\n\n\006SOCKET\020\002\"<\n"
    "\024McsfSendDataResponse\022\022\n\nis_success\030\001 \002("
    "\010\022\020\n\010contents\030\002 \001(\014\".\n\036McsfUnRegisterCon"
    "taineeRequest\022\014\n\004name\030\001 \002(\t", 787);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SystemCmdMessage.proto", &protobuf_RegisterTypes);
  McsfRegisterContaineeRequest::default_instance_ = new McsfRegisterContaineeRequest();
  McsfQueryContaineeRequest::default_instance_ = new McsfQueryContaineeRequest();
  McsfQueryContaineeResponse::default_instance_ = new McsfQueryContaineeResponse();
  McsfSubscribeEventRequest::default_instance_ = new McsfSubscribeEventRequest();
  McsfSubscribeEventRequest_EventSource::default_instance_ = new McsfSubscribeEventRequest_EventSource();
  McsfCheckCastToNameRequest::default_instance_ = new McsfCheckCastToNameRequest();
  McsfCheckCastToNameResponse::default_instance_ = new McsfCheckCastToNameResponse();
  McsfSendDataRequest::default_instance_ = new McsfSendDataRequest();
  McsfSendDataResponse::default_instance_ = new McsfSendDataResponse();
  McsfUnRegisterContaineeRequest::default_instance_ = new McsfUnRegisterContaineeRequest();
  McsfRegisterContaineeRequest::default_instance_->InitAsDefaultInstance();
  McsfQueryContaineeRequest::default_instance_->InitAsDefaultInstance();
  McsfQueryContaineeResponse::default_instance_->InitAsDefaultInstance();
  McsfSubscribeEventRequest::default_instance_->InitAsDefaultInstance();
  McsfSubscribeEventRequest_EventSource::default_instance_->InitAsDefaultInstance();
  McsfCheckCastToNameRequest::default_instance_->InitAsDefaultInstance();
  McsfCheckCastToNameResponse::default_instance_->InitAsDefaultInstance();
  McsfSendDataRequest::default_instance_->InitAsDefaultInstance();
  McsfSendDataResponse::default_instance_->InitAsDefaultInstance();
  McsfUnRegisterContaineeRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SystemCmdMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SystemCmdMessage_2eproto {
  StaticDescriptorInitializer_SystemCmdMessage_2eproto() {
    protobuf_AddDesc_SystemCmdMessage_2eproto();
  }
} static_descriptor_initializer_SystemCmdMessage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int McsfRegisterContaineeRequest::kNameFieldNumber;
const int McsfRegisterContaineeRequest::kIpAddrFieldNumber;
#endif  // !_MSC_VER

McsfRegisterContaineeRequest::McsfRegisterContaineeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void McsfRegisterContaineeRequest::InitAsDefaultInstance() {
}

McsfRegisterContaineeRequest::McsfRegisterContaineeRequest(const McsfRegisterContaineeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void McsfRegisterContaineeRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

McsfRegisterContaineeRequest::~McsfRegisterContaineeRequest() {
  SharedDtor();
}

void McsfRegisterContaineeRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ip_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_addr_;
  }
  if (this != default_instance_) {
  }
}

void McsfRegisterContaineeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* McsfRegisterContaineeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McsfRegisterContaineeRequest_descriptor_;
}

const McsfRegisterContaineeRequest& McsfRegisterContaineeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmdMessage_2eproto();  return *default_instance_;
}

McsfRegisterContaineeRequest* McsfRegisterContaineeRequest::default_instance_ = NULL;

McsfRegisterContaineeRequest* McsfRegisterContaineeRequest::New() const {
  return new McsfRegisterContaineeRequest;
}

void McsfRegisterContaineeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ip_addr()) {
      if (ip_addr_ != &::google::protobuf::internal::kEmptyString) {
        ip_addr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool McsfRegisterContaineeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_addr;
        break;
      }
      
      // required string ip_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_addr().data(), this->ip_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void McsfRegisterContaineeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string ip_addr = 2;
  if (has_ip_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_addr().data(), this->ip_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip_addr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* McsfRegisterContaineeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string ip_addr = 2;
  if (has_ip_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_addr().data(), this->ip_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_addr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int McsfRegisterContaineeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string ip_addr = 2;
    if (has_ip_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_addr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void McsfRegisterContaineeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const McsfRegisterContaineeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const McsfRegisterContaineeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void McsfRegisterContaineeRequest::MergeFrom(const McsfRegisterContaineeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip_addr()) {
      set_ip_addr(from.ip_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void McsfRegisterContaineeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McsfRegisterContaineeRequest::CopyFrom(const McsfRegisterContaineeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McsfRegisterContaineeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void McsfRegisterContaineeRequest::Swap(McsfRegisterContaineeRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ip_addr_, other->ip_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata McsfRegisterContaineeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = McsfRegisterContaineeRequest_descriptor_;
  metadata.reflection = McsfRegisterContaineeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int McsfQueryContaineeRequest::kNameFieldNumber;
#endif  // !_MSC_VER

McsfQueryContaineeRequest::McsfQueryContaineeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void McsfQueryContaineeRequest::InitAsDefaultInstance() {
}

McsfQueryContaineeRequest::McsfQueryContaineeRequest(const McsfQueryContaineeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void McsfQueryContaineeRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

McsfQueryContaineeRequest::~McsfQueryContaineeRequest() {
  SharedDtor();
}

void McsfQueryContaineeRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void McsfQueryContaineeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* McsfQueryContaineeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McsfQueryContaineeRequest_descriptor_;
}

const McsfQueryContaineeRequest& McsfQueryContaineeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmdMessage_2eproto();  return *default_instance_;
}

McsfQueryContaineeRequest* McsfQueryContaineeRequest::default_instance_ = NULL;

McsfQueryContaineeRequest* McsfQueryContaineeRequest::New() const {
  return new McsfQueryContaineeRequest;
}

void McsfQueryContaineeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool McsfQueryContaineeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void McsfQueryContaineeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* McsfQueryContaineeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int McsfQueryContaineeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void McsfQueryContaineeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const McsfQueryContaineeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const McsfQueryContaineeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void McsfQueryContaineeRequest::MergeFrom(const McsfQueryContaineeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void McsfQueryContaineeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McsfQueryContaineeRequest::CopyFrom(const McsfQueryContaineeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McsfQueryContaineeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void McsfQueryContaineeRequest::Swap(McsfQueryContaineeRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata McsfQueryContaineeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = McsfQueryContaineeRequest_descriptor_;
  metadata.reflection = McsfQueryContaineeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int McsfQueryContaineeResponse::kNameFieldNumber;
const int McsfQueryContaineeResponse::kIpAddrFieldNumber;
#endif  // !_MSC_VER

McsfQueryContaineeResponse::McsfQueryContaineeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void McsfQueryContaineeResponse::InitAsDefaultInstance() {
}

McsfQueryContaineeResponse::McsfQueryContaineeResponse(const McsfQueryContaineeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void McsfQueryContaineeResponse::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

McsfQueryContaineeResponse::~McsfQueryContaineeResponse() {
  SharedDtor();
}

void McsfQueryContaineeResponse::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ip_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_addr_;
  }
  if (this != default_instance_) {
  }
}

void McsfQueryContaineeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* McsfQueryContaineeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McsfQueryContaineeResponse_descriptor_;
}

const McsfQueryContaineeResponse& McsfQueryContaineeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmdMessage_2eproto();  return *default_instance_;
}

McsfQueryContaineeResponse* McsfQueryContaineeResponse::default_instance_ = NULL;

McsfQueryContaineeResponse* McsfQueryContaineeResponse::New() const {
  return new McsfQueryContaineeResponse;
}

void McsfQueryContaineeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ip_addr()) {
      if (ip_addr_ != &::google::protobuf::internal::kEmptyString) {
        ip_addr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool McsfQueryContaineeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_addr;
        break;
      }
      
      // required string ip_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_addr().data(), this->ip_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void McsfQueryContaineeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string ip_addr = 2;
  if (has_ip_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_addr().data(), this->ip_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip_addr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* McsfQueryContaineeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string ip_addr = 2;
  if (has_ip_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_addr().data(), this->ip_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_addr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int McsfQueryContaineeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string ip_addr = 2;
    if (has_ip_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_addr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void McsfQueryContaineeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const McsfQueryContaineeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const McsfQueryContaineeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void McsfQueryContaineeResponse::MergeFrom(const McsfQueryContaineeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip_addr()) {
      set_ip_addr(from.ip_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void McsfQueryContaineeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McsfQueryContaineeResponse::CopyFrom(const McsfQueryContaineeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McsfQueryContaineeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void McsfQueryContaineeResponse::Swap(McsfQueryContaineeResponse* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ip_addr_, other->ip_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata McsfQueryContaineeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = McsfQueryContaineeResponse_descriptor_;
  metadata.reflection = McsfQueryContaineeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int McsfSubscribeEventRequest_EventSource::kChannelIdFieldNumber;
const int McsfSubscribeEventRequest_EventSource::kEventIdsFieldNumber;
#endif  // !_MSC_VER

McsfSubscribeEventRequest_EventSource::McsfSubscribeEventRequest_EventSource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void McsfSubscribeEventRequest_EventSource::InitAsDefaultInstance() {
}

McsfSubscribeEventRequest_EventSource::McsfSubscribeEventRequest_EventSource(const McsfSubscribeEventRequest_EventSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void McsfSubscribeEventRequest_EventSource::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

McsfSubscribeEventRequest_EventSource::~McsfSubscribeEventRequest_EventSource() {
  SharedDtor();
}

void McsfSubscribeEventRequest_EventSource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void McsfSubscribeEventRequest_EventSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* McsfSubscribeEventRequest_EventSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McsfSubscribeEventRequest_EventSource_descriptor_;
}

const McsfSubscribeEventRequest_EventSource& McsfSubscribeEventRequest_EventSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmdMessage_2eproto();  return *default_instance_;
}

McsfSubscribeEventRequest_EventSource* McsfSubscribeEventRequest_EventSource::default_instance_ = NULL;

McsfSubscribeEventRequest_EventSource* McsfSubscribeEventRequest_EventSource::New() const {
  return new McsfSubscribeEventRequest_EventSource;
}

void McsfSubscribeEventRequest_EventSource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_id_ = 0;
  }
  event_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool McsfSubscribeEventRequest_EventSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_ids;
        break;
      }
      
      // repeated int32 event_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_event_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_event_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void McsfSubscribeEventRequest_EventSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel_id(), output);
  }
  
  // repeated int32 event_ids = 2;
  for (int i = 0; i < this->event_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->event_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* McsfSubscribeEventRequest_EventSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel_id(), target);
  }
  
  // repeated int32 event_ids = 2;
  for (int i = 0; i < this->event_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->event_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int McsfSubscribeEventRequest_EventSource::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_id());
    }
    
  }
  // repeated int32 event_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->event_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->event_ids(i));
    }
    total_size += 1 * this->event_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void McsfSubscribeEventRequest_EventSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const McsfSubscribeEventRequest_EventSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const McsfSubscribeEventRequest_EventSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void McsfSubscribeEventRequest_EventSource::MergeFrom(const McsfSubscribeEventRequest_EventSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_ids_.MergeFrom(from.event_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void McsfSubscribeEventRequest_EventSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McsfSubscribeEventRequest_EventSource::CopyFrom(const McsfSubscribeEventRequest_EventSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McsfSubscribeEventRequest_EventSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void McsfSubscribeEventRequest_EventSource::Swap(McsfSubscribeEventRequest_EventSource* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    event_ids_.Swap(&other->event_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata McsfSubscribeEventRequest_EventSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = McsfSubscribeEventRequest_EventSource_descriptor_;
  metadata.reflection = McsfSubscribeEventRequest_EventSource_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int McsfSubscribeEventRequest::kSubscriberFieldNumber;
const int McsfSubscribeEventRequest::kEventMarksFieldNumber;
#endif  // !_MSC_VER

McsfSubscribeEventRequest::McsfSubscribeEventRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void McsfSubscribeEventRequest::InitAsDefaultInstance() {
}

McsfSubscribeEventRequest::McsfSubscribeEventRequest(const McsfSubscribeEventRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void McsfSubscribeEventRequest::SharedCtor() {
  _cached_size_ = 0;
  subscriber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

McsfSubscribeEventRequest::~McsfSubscribeEventRequest() {
  SharedDtor();
}

void McsfSubscribeEventRequest::SharedDtor() {
  if (subscriber_ != &::google::protobuf::internal::kEmptyString) {
    delete subscriber_;
  }
  if (this != default_instance_) {
  }
}

void McsfSubscribeEventRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* McsfSubscribeEventRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McsfSubscribeEventRequest_descriptor_;
}

const McsfSubscribeEventRequest& McsfSubscribeEventRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmdMessage_2eproto();  return *default_instance_;
}

McsfSubscribeEventRequest* McsfSubscribeEventRequest::default_instance_ = NULL;

McsfSubscribeEventRequest* McsfSubscribeEventRequest::New() const {
  return new McsfSubscribeEventRequest;
}

void McsfSubscribeEventRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_subscriber()) {
      if (subscriber_ != &::google::protobuf::internal::kEmptyString) {
        subscriber_->clear();
      }
    }
  }
  event_marks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool McsfSubscribeEventRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string subscriber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscriber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subscriber().data(), this->subscriber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event_marks;
        break;
      }
      
      // repeated .Mcsf.McsfSubscribeEventRequest.EventSource event_marks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_marks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_marks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event_marks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void McsfSubscribeEventRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string subscriber = 1;
  if (has_subscriber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subscriber().data(), this->subscriber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->subscriber(), output);
  }
  
  // repeated .Mcsf.McsfSubscribeEventRequest.EventSource event_marks = 2;
  for (int i = 0; i < this->event_marks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event_marks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* McsfSubscribeEventRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string subscriber = 1;
  if (has_subscriber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subscriber().data(), this->subscriber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscriber(), target);
  }
  
  // repeated .Mcsf.McsfSubscribeEventRequest.EventSource event_marks = 2;
  for (int i = 0; i < this->event_marks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event_marks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int McsfSubscribeEventRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string subscriber = 1;
    if (has_subscriber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subscriber());
    }
    
  }
  // repeated .Mcsf.McsfSubscribeEventRequest.EventSource event_marks = 2;
  total_size += 1 * this->event_marks_size();
  for (int i = 0; i < this->event_marks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_marks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void McsfSubscribeEventRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const McsfSubscribeEventRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const McsfSubscribeEventRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void McsfSubscribeEventRequest::MergeFrom(const McsfSubscribeEventRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_marks_.MergeFrom(from.event_marks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscriber()) {
      set_subscriber(from.subscriber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void McsfSubscribeEventRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McsfSubscribeEventRequest::CopyFrom(const McsfSubscribeEventRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McsfSubscribeEventRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < event_marks_size(); i++) {
    if (!this->event_marks(i).IsInitialized()) return false;
  }
  return true;
}

void McsfSubscribeEventRequest::Swap(McsfSubscribeEventRequest* other) {
  if (other != this) {
    std::swap(subscriber_, other->subscriber_);
    event_marks_.Swap(&other->event_marks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata McsfSubscribeEventRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = McsfSubscribeEventRequest_descriptor_;
  metadata.reflection = McsfSubscribeEventRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int McsfCheckCastToNameRequest::kNameFieldNumber;
const int McsfCheckCastToNameRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

McsfCheckCastToNameRequest::McsfCheckCastToNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void McsfCheckCastToNameRequest::InitAsDefaultInstance() {
}

McsfCheckCastToNameRequest::McsfCheckCastToNameRequest(const McsfCheckCastToNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void McsfCheckCastToNameRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

McsfCheckCastToNameRequest::~McsfCheckCastToNameRequest() {
  SharedDtor();
}

void McsfCheckCastToNameRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void McsfCheckCastToNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* McsfCheckCastToNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McsfCheckCastToNameRequest_descriptor_;
}

const McsfCheckCastToNameRequest& McsfCheckCastToNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmdMessage_2eproto();  return *default_instance_;
}

McsfCheckCastToNameRequest* McsfCheckCastToNameRequest::default_instance_ = NULL;

McsfCheckCastToNameRequest* McsfCheckCastToNameRequest::New() const {
  return new McsfCheckCastToNameRequest;
}

void McsfCheckCastToNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    timeout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool McsfCheckCastToNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }
      
      // required int32 timeout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void McsfCheckCastToNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* McsfCheckCastToNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int McsfCheckCastToNameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void McsfCheckCastToNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const McsfCheckCastToNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const McsfCheckCastToNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void McsfCheckCastToNameRequest::MergeFrom(const McsfCheckCastToNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void McsfCheckCastToNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McsfCheckCastToNameRequest::CopyFrom(const McsfCheckCastToNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McsfCheckCastToNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void McsfCheckCastToNameRequest::Swap(McsfCheckCastToNameRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata McsfCheckCastToNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = McsfCheckCastToNameRequest_descriptor_;
  metadata.reflection = McsfCheckCastToNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int McsfCheckCastToNameResponse::kResultFieldNumber;
const int McsfCheckCastToNameResponse::kIpAddrFieldNumber;
#endif  // !_MSC_VER

McsfCheckCastToNameResponse::McsfCheckCastToNameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void McsfCheckCastToNameResponse::InitAsDefaultInstance() {
}

McsfCheckCastToNameResponse::McsfCheckCastToNameResponse(const McsfCheckCastToNameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void McsfCheckCastToNameResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ip_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

McsfCheckCastToNameResponse::~McsfCheckCastToNameResponse() {
  SharedDtor();
}

void McsfCheckCastToNameResponse::SharedDtor() {
  if (ip_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_addr_;
  }
  if (this != default_instance_) {
  }
}

void McsfCheckCastToNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* McsfCheckCastToNameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McsfCheckCastToNameResponse_descriptor_;
}

const McsfCheckCastToNameResponse& McsfCheckCastToNameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmdMessage_2eproto();  return *default_instance_;
}

McsfCheckCastToNameResponse* McsfCheckCastToNameResponse::default_instance_ = NULL;

McsfCheckCastToNameResponse* McsfCheckCastToNameResponse::New() const {
  return new McsfCheckCastToNameResponse;
}

void McsfCheckCastToNameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_ip_addr()) {
      if (ip_addr_ != &::google::protobuf::internal::kEmptyString) {
        ip_addr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool McsfCheckCastToNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_addr;
        break;
      }
      
      // required string ip_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_addr().data(), this->ip_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void McsfCheckCastToNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // required string ip_addr = 2;
  if (has_ip_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_addr().data(), this->ip_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip_addr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* McsfCheckCastToNameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // required string ip_addr = 2;
  if (has_ip_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_addr().data(), this->ip_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_addr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int McsfCheckCastToNameResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // required string ip_addr = 2;
    if (has_ip_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_addr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void McsfCheckCastToNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const McsfCheckCastToNameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const McsfCheckCastToNameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void McsfCheckCastToNameResponse::MergeFrom(const McsfCheckCastToNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ip_addr()) {
      set_ip_addr(from.ip_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void McsfCheckCastToNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McsfCheckCastToNameResponse::CopyFrom(const McsfCheckCastToNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McsfCheckCastToNameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void McsfCheckCastToNameResponse::Swap(McsfCheckCastToNameResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ip_addr_, other->ip_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata McsfCheckCastToNameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = McsfCheckCastToNameResponse_descriptor_;
  metadata.reflection = McsfCheckCastToNameResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* McsfSendDataRequest_SendType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McsfSendDataRequest_SendType_descriptor_;
}
bool McsfSendDataRequest_SendType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const McsfSendDataRequest_SendType McsfSendDataRequest::SHARE_MEMORY;
const McsfSendDataRequest_SendType McsfSendDataRequest::SOCKET;
const McsfSendDataRequest_SendType McsfSendDataRequest::SendType_MIN;
const McsfSendDataRequest_SendType McsfSendDataRequest::SendType_MAX;
const int McsfSendDataRequest::SendType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int McsfSendDataRequest::kNameFieldNumber;
const int McsfSendDataRequest::kTypeFieldNumber;
const int McsfSendDataRequest::kContentFieldNumber;
const int McsfSendDataRequest::kIsSyncFieldNumber;
#endif  // !_MSC_VER

McsfSendDataRequest::McsfSendDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void McsfSendDataRequest::InitAsDefaultInstance() {
}

McsfSendDataRequest::McsfSendDataRequest(const McsfSendDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void McsfSendDataRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_sync_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

McsfSendDataRequest::~McsfSendDataRequest() {
  SharedDtor();
}

void McsfSendDataRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void McsfSendDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* McsfSendDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McsfSendDataRequest_descriptor_;
}

const McsfSendDataRequest& McsfSendDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmdMessage_2eproto();  return *default_instance_;
}

McsfSendDataRequest* McsfSendDataRequest::default_instance_ = NULL;

McsfSendDataRequest* McsfSendDataRequest::New() const {
  return new McsfSendDataRequest;
}

void McsfSendDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    is_sync_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool McsfSendDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .Mcsf.McsfSendDataRequest.SendType type = 2 [default = SHARE_MEMORY];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mcsf::McsfSendDataRequest_SendType_IsValid(value)) {
            set_type(static_cast< ::Mcsf::McsfSendDataRequest_SendType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // required bytes content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_sync;
        break;
      }
      
      // required bool is_sync = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sync_)));
          set_has_is_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void McsfSendDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required .Mcsf.McsfSendDataRequest.SendType type = 2 [default = SHARE_MEMORY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // required bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->content(), output);
  }
  
  // required bool is_sync = 4 [default = false];
  if (has_is_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_sync(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* McsfSendDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required .Mcsf.McsfSendDataRequest.SendType type = 2 [default = SHARE_MEMORY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // required bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }
  
  // required bool is_sync = 4 [default = false];
  if (has_is_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_sync(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int McsfSendDataRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .Mcsf.McsfSendDataRequest.SendType type = 2 [default = SHARE_MEMORY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
    // required bool is_sync = 4 [default = false];
    if (has_is_sync()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void McsfSendDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const McsfSendDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const McsfSendDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void McsfSendDataRequest::MergeFrom(const McsfSendDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_is_sync()) {
      set_is_sync(from.is_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void McsfSendDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McsfSendDataRequest::CopyFrom(const McsfSendDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McsfSendDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void McsfSendDataRequest::Swap(McsfSendDataRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(is_sync_, other->is_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata McsfSendDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = McsfSendDataRequest_descriptor_;
  metadata.reflection = McsfSendDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int McsfSendDataResponse::kIsSuccessFieldNumber;
const int McsfSendDataResponse::kContentsFieldNumber;
#endif  // !_MSC_VER

McsfSendDataResponse::McsfSendDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void McsfSendDataResponse::InitAsDefaultInstance() {
}

McsfSendDataResponse::McsfSendDataResponse(const McsfSendDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void McsfSendDataResponse::SharedCtor() {
  _cached_size_ = 0;
  is_success_ = false;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

McsfSendDataResponse::~McsfSendDataResponse() {
  SharedDtor();
}

void McsfSendDataResponse::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void McsfSendDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* McsfSendDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McsfSendDataResponse_descriptor_;
}

const McsfSendDataResponse& McsfSendDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmdMessage_2eproto();  return *default_instance_;
}

McsfSendDataResponse* McsfSendDataResponse::default_instance_ = NULL;

McsfSendDataResponse* McsfSendDataResponse::New() const {
  return new McsfSendDataResponse;
}

void McsfSendDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_success_ = false;
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::kEmptyString) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool McsfSendDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }
      
      // optional bytes contents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void McsfSendDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_success = 1;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_success(), output);
  }
  
  // optional bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->contents(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* McsfSendDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_success = 1;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_success(), target);
  }
  
  // optional bytes contents = 2;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int McsfSendDataResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_success = 1;
    if (has_is_success()) {
      total_size += 1 + 1;
    }
    
    // optional bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void McsfSendDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const McsfSendDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const McsfSendDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void McsfSendDataResponse::MergeFrom(const McsfSendDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void McsfSendDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McsfSendDataResponse::CopyFrom(const McsfSendDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McsfSendDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void McsfSendDataResponse::Swap(McsfSendDataResponse* other) {
  if (other != this) {
    std::swap(is_success_, other->is_success_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata McsfSendDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = McsfSendDataResponse_descriptor_;
  metadata.reflection = McsfSendDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int McsfUnRegisterContaineeRequest::kNameFieldNumber;
#endif  // !_MSC_VER

McsfUnRegisterContaineeRequest::McsfUnRegisterContaineeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void McsfUnRegisterContaineeRequest::InitAsDefaultInstance() {
}

McsfUnRegisterContaineeRequest::McsfUnRegisterContaineeRequest(const McsfUnRegisterContaineeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void McsfUnRegisterContaineeRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

McsfUnRegisterContaineeRequest::~McsfUnRegisterContaineeRequest() {
  SharedDtor();
}

void McsfUnRegisterContaineeRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void McsfUnRegisterContaineeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* McsfUnRegisterContaineeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McsfUnRegisterContaineeRequest_descriptor_;
}

const McsfUnRegisterContaineeRequest& McsfUnRegisterContaineeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmdMessage_2eproto();  return *default_instance_;
}

McsfUnRegisterContaineeRequest* McsfUnRegisterContaineeRequest::default_instance_ = NULL;

McsfUnRegisterContaineeRequest* McsfUnRegisterContaineeRequest::New() const {
  return new McsfUnRegisterContaineeRequest;
}

void McsfUnRegisterContaineeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool McsfUnRegisterContaineeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void McsfUnRegisterContaineeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* McsfUnRegisterContaineeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int McsfUnRegisterContaineeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void McsfUnRegisterContaineeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const McsfUnRegisterContaineeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const McsfUnRegisterContaineeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void McsfUnRegisterContaineeRequest::MergeFrom(const McsfUnRegisterContaineeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void McsfUnRegisterContaineeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McsfUnRegisterContaineeRequest::CopyFrom(const McsfUnRegisterContaineeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McsfUnRegisterContaineeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void McsfUnRegisterContaineeRequest::Swap(McsfUnRegisterContaineeRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata McsfUnRegisterContaineeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = McsfUnRegisterContaineeRequest_descriptor_;
  metadata.reflection = McsfUnRegisterContaineeRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Mcsf

// @@protoc_insertion_point(global_scope)
